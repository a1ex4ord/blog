<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>iptables - 标签 - zu1k</title><link>https://zu1k.com/tags/iptables/</link><description/><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 11 Apr 2021 17:11:00 +0800</lastBuildDate><atom:link href="https://zu1k.com/tags/iptables/" rel="self" type="application/rss+xml"/><item><title>垃圾校园网，我忍不了了</title><link>https://zu1k.com/posts/tutorials/campus-network-speed-overlay/</link><pubDate>Sun, 11 Apr 2021 17:11:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/tutorials/campus-network-speed-overlay/</guid><description><![CDATA[<p>记得大一刚入学时，免费的校园网是上下行对等的100Mbps带宽，虽然赶不上家里的速度，但是用起来还是比较舒服的</p>
<p>万万没想到，当别的学校都在忙着升级成千兆网络的时候，自己学校竟然来了个反向操作，30Mbps限速，真TMD鬼，不知道怎么想的</p>
<p>这垃圾校园网，我是忍不了了，考虑到每个人都能多个设备同时登录，肯定就有多拨的可能，那就搞起来！</p>
<h2 id="linux下手工操作"><a href="#linux下手工操作" class="header-mark headerLink">Linux下手工操作</a></h2>
<p>本着学习的态度，上来肯定要先在Linux下手动操作一遍（其实我是先用iKuai验证可行后，才尝试用Linux手工配的</p>
<p>我们的基本思路是：</p>
<ol>
<li>拿到多个IP</li>
<li>过了学校的联网认证</li>
<li>进行负载均衡</li>
</ol>
<p>以下所有操作都需要root权限</p>
<h3 id="利用macvlan获取多个ip"><a href="#利用macvlan获取多个ip" class="header-mark headerLink">利用macvlan获取多个IP</a></h3>
<p>首先要创建多个虚拟网络接口，利用不同的Mac地址进行DHCP获取多个不同的IP地址</p>
<p>在Linux下，内核提供的macvlan就可以实现我们的需求，从Linux Kernel 3.9开始就支持了貌似，所以只要不是安装非常老的系统都是支持的</p>
<p>查看一下你的系统是否支持：</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># modprobe macvlan</span>
</span></span><span class="line"><span class="cl"><span class="c1"># lsmod | grep macvlan</span>
</span></span><span class="line"><span class="cl">macvlan                <span class="m">24576</span>  <span class="m">0</span>
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>如果显示类似上面的内容就表示支持</p>
<p>添加一个macvlan类型的网络接口：</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link &lt;physical-network-interface-name&gt; &lt;new-network-interface-name&gt; <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>例如，通过 <code>ip addr</code> 或者 <code>ifconfig</code> 查看到物理网卡名为 <code>eth0</code>，新网络接口名我们用 <code>vmac0</code> <code>vmac1</code> 这样的表示，命令如下：</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link eth0 vmac0 <span class="nb">type</span> macvlan
</span></span><span class="line"><span class="cl">ip link add link eth0 vmac1 <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>这样就创建了两个新的网络接口，依附于物理接口 <code>eth0</code>，两个新网络接口的mac地址是自动分配的，每一次新建都会随机生成。</p>
<p>如果想要手动指定mac地址，可以使用下面的命令:</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link &lt;physical-network-interface-name&gt; &lt;new-network-interface-name&gt; address &lt;mac-address&gt; <span class="nb">type</span> macvlan
</span></span><span class="line"><span class="cl">例如：
</span></span><span class="line"><span class="cl">ip link add link eth0 vmac0 address 11:22:33:44:55:66 <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table></div>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon icon-lightbulb"></i>技巧<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">更加详细的命令通过 <code>ip link help</code> 和 <code>man ip link</code> 查看</div>
        </div>
    </div>
<p>经过上面这一步，就就可以通过 <code>ip link</code> 看到多了两个网络接口</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">4: vmac0@eth0: &lt;BROADCAST,MULTICAST&gt; mtu <span class="m">1500</span> qdisc noop state DOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 5a:5d:f9:1e:b8:19 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">5: vmac1@eth0: &lt;BROADCAST,MULTICAST&gt; mtu <span class="m">1500</span> qdisc noop state DOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 66:50:b5:23:d8:ce brd ff:ff:ff:ff:ff:ff
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>然后需要获取到多个IP，直接执行 <code>dhclient</code> 即可</p>
<h3 id="进行联网认证"><a href="#进行联网认证" class="header-mark headerLink">进行联网认证</a></h3>
<p>我们学校用的是深澜的认证系统，对其认证流程分析后，写了一个小工具:<a href="/posts/tutorials/campus-network-speed-overlay/sdu-srun.zip" rel="" class="post-link">多账号登录认证工具</a></p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon icon-info-circled"></i>信息<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>2021年11月4日 更新</p>
<p>用Rust写了一个新的登录工具，更轻量更好用</p>
<p><a href="https://github.com/zu1k/sdusrun" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/zu1k/sdusrun</a></p>
</div>
        </div>
    </div>
<p>在启动前先修改配置文件，username为学号，password为上网认证的密码，ip分别写刚刚 macvlan 获取到的IP</p>
<p>学校限制的每个人最多5台设备同时在线，新登录的设备会把前面的设备顶下去，所以最好联合舍友用多个人的账号进行认证</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">login</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user1-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user1-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user2-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.3</span><span class="w">
</span></span></span></code></pre></td></tr></table></div>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">认证成功后即可进行下面的步骤，如果认证失败需要检查账号密码是否正确，本工具也不能保证后续系统更新后仍能使用，必要时可登录认证后台手工添加mac认证白名单</div>
        </div>
    </div>
<h3 id="进行路由级别的分流"><a href="#进行路由级别的分流" class="header-mark headerLink">进行路由级别的分流</a></h3>
<p>经过上面的步骤，其实现在已经有多个可以上网的接口了，每一个接口都限速30Mbps，可以通过修改路由表验证，但是测速发现还是总速度还是30Mbps，速度并没有叠加</p>
<p>这其实是因为你的主机只有一个默认网关，流量实际上只走了一条线，所以还是受单接口限速的限制。我们的目的是让流量能够分别走多个接口，从而达到速度叠加的效果，也就是常说的负载均衡</p>
<p>思路是：通过iptables规则给数据包打上标记，然后通过策略路由根据标记来选择走哪个接口出去。需要注意不同包之间的关系，追踪连接状态并恢复标记，否则的话同一个连接的不同包走了不同的接口，会被丢弃掉。</p>
<h4 id="创建路由表"><a href="#创建路由表" class="header-mark headerLink">创建路由表</a></h4>
<p>首先创建多个路由表，因为每一个路由表只能默认走一个接口，所以刚刚创建了多少虚拟网络接口，这里就要增加几个路由表，我按照2个接口来演示</p>
<p>编辑 <code>/etc/iproute2/rt_tables</code> 文件，在文件末尾增加两个路由表</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 新增的路由表</span>
</span></span><span class="line"><span class="cl"><span class="m">100</span>      vmac0
</span></span><span class="line"><span class="cl"><span class="m">101</span>      vmac1
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>保证新路由表中没有条目，先清空一下</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip route flush table vmac0
</span></span><span class="line"><span class="cl">ip route flush table vmac1
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>分别为两个路由表增加默认路由项，分别走不同的网络接口</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip route add 0/0 dev vmac0 table vmac0
</span></span><span class="line"><span class="cl">ip route add 0/0 dev vmac1 table vmac1
</span></span></code></pre></td></tr></table></div>
</div>
</div><h4 id="配置iptables"><a href="#配置iptables" class="header-mark headerLink">配置iptables</a></h4>
<p>分别创建多个新的链</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -N VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC0 -j MARK --set-mark 0x100
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC0 -j CONNMARK --save-mark
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">iptables -t mangle -N VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC1 -j MARK --set-mark 0x101
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC1 -j CONNMARK --save-mark
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>配置打标记的规则，每两个包（只看新建的连接）中第一个交给<code>VMAC0</code>处理，第二个交给<code>VMAC1</code>处理</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">0</span> -j VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">1</span> -j VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state ESTABLISHED,RELATED -j CONNMARK --restore-mark
</span></span></code></pre></td></tr></table></div>
</div>
</div><h4 id="配置策略路由"><a href="#配置策略路由" class="header-mark headerLink">配置策略路由</a></h4>
<p>下面需要配置策略路由，根据我们设置的策略，流量分别由多个路由表进行路由，所以就可以走多个网络接口了</p>
<p>我们让防火墙标记为<code>0x100</code>的用<code>vmac0</code>路由表，标记为<code>0x101</code>流量的用<code>vmac1</code>路由表</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip rule add fwmark 0x100 table vmac0
</span></span><span class="line"><span class="cl">ip rule add fwmark 0x101 table vmac1
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>此时会出现一个问题，就是从外部发起的连接在进来后并没有打上防火墙标记，所以返回的包只能走默认的路由表。假如我们的默认路由表的默认路由是走<code>vmac0</code>，那来自<code>vmac1</code>的请求的响应包也会走<code>vmac0</code>出去，因为不属于同一个连接，这个包就会被丢掉。</p>
<p>我们的解决方法是再增加两条规则，来自哪个网卡的包的响应就从该网卡出</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip rule add from &lt;vmac0-ip&gt; table vmac0
</span></span><span class="line"><span class="cl">ip rule add from &lt;vmac1-ip&gt; table vmac1
</span></span></code></pre></td></tr></table></div>
</div>
</div><h4 id="用作路由器"><a href="#用作路由器" class="header-mark headerLink">用作路由器</a></h4>
<p>如果这台Linux需要用作网关，需要配置PREROUTING链，这里假设内网网段为 <code>192.168/16</code></p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">0</span> -j VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">1</span> -j VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state ESTABLISHED,RELATED -j CONNMARK --restore-mark
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>同时需要对内网流量进行SNAT</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -o vmac+ -j MASQUERADE
</span></span></code></pre></td></tr></table></div>
</div>
</div><p>经过上面的步骤，已经能够利用多个网络接口了。不过我们本质上是通过连接分流的，同一个连接的所有包会走同一个接口出去，所以如果你的程序是单线程网络，就看不到加速效果。可以通过speedtest多线程来进行测试，可以看到明显的网速叠加。</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>我刚刚的演示重启后虚拟网卡会丢失，因为自动分配的mac地址，重新运行命令会导致mac和ip变动，需要重新认证</p>
<p>可以使用指定mac地址的方法创建，也有持久化虚拟网卡的方法，可以一劳永逸</p>
<p>后面会将更加成熟的方法，这里手工配置不是重点，需要的自行学习研究吧！</p>
</div>
        </div>
    </div>
<h2 id="使用openwrtmwan3"><a href="#使用openwrtmwan3" class="header-mark headerLink">使用OpenWrt+mwan3</a></h2>
<p>我比较推荐在宿舍里搞个软路由，普通的路由刷OpenWrt或者弄个树莓派刷OpenWrt都行，可以考虑买个二手矿渣 <code>newifi 3</code> 或者 <code>R2S</code></p>
<p>因为在OpenWrt里面有现成的插件，可以非常方便的创建多个虚拟网络接口，并能够利用图形界面配置更加强大的分流策略。</p>
<p>主要涉及到两个插件：kmod-macvlan和mwan3</p>
<h3 id="添加设备获取ip"><a href="#添加设备获取ip" class="header-mark headerLink">添加设备，获取IP</a></h3>
<p>首先在正确配置好网络的基础上，先创建网络设备，类型是macvlan，在学习了Linux下手工操作的基础上，这里的配置项都好理解</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/network-device_hua4a41f9c73827df582ea964037e09721_41569_656x368_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/network-device_hua4a41f9c73827df582ea964037e09721_41569_656x368_resize_q75_h2_box_3.webp"
        title="网络设备"
        height="368" width="656"
        loading="lazy"
    /></p>
<p>要几拨就添加几个设备，注意最好手工指定一下mac，基础设备选正常上网的wan口物理设备</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/network-device-add_hu4a2aa46d6abc4695e42f682157e0b152_20526_561x321_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/network-device-add_hu4a2aa46d6abc4695e42f682157e0b152_20526_561x321_resize_q75_h2_box_3.webp"
        title="添加网络设备"
        height="321" width="561"
        loading="lazy"
    /></p>
<p>然后添加相同数量的接口，协议选DHCP，接口设备选刚刚创建的，一一对应</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/network-interface-add_hu621dfbbca86664cd67b870fcdae67db3_36472_567x366_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/network-interface-add_hu621dfbbca86664cd67b870fcdae67db3_36472_567x366_resize_q75_h2_box_3.webp"
        title="添加网络接口"
        height="366" width="567"
        loading="lazy"
    /></p>
<p>接口添加好后，进行连接就会自动获取IP了，然后与上面手工方式一样，把所有IP都认证一下</p>
<h3 id="配置mwan3分流"><a href="#配置mwan3分流" class="header-mark headerLink">配置mwan3分流</a></h3>
<p>在mwan的管理界面，首先添加接口，与网络里面刚刚配置的接口一一对应</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-interface_hu4152b2e4189d37b51917b8dfa8415502_33920_797x426_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-interface_hu4152b2e4189d37b51917b8dfa8415502_33920_797x426_resize_q75_h2_box_3.webp"
        title="添加接口"
        height="426" width="797"
        loading="lazy"
    /></p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">这里涉及到接口可用性的检测，需要仔细设置一下，后面的分流需要依赖这个可用性检测，总不能把流量分给不可用的接口吧</div>
        </div>
    </div>
<p>然后添加成员，与刚刚添加的接口一一对应，这里添加的可以在后面策略那里选择</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-member_hu128229219abfac83ba956b2bc1ee0e26_32285_730x372_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-member_hu128229219abfac83ba956b2bc1ee0e26_32285_730x372_resize_q75_h2_box_3.webp"
        title="添加成员"
        height="372" width="730"
        loading="lazy"
    /></p>
<p>添加策略，图中第一条是负载均衡策略，刚刚添加的成员全都选中，意思就是说同时使用这所有的网络</p>
<p>后面几条策略分别是用来测试想用网络设备的</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-policy_huf0057ef3cab073b3a770a321c785247d_54579_766x533_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-policy_huf0057ef3cab073b3a770a321c785247d_54579_766x533_resize_q75_h2_box_3.webp"
        title="添加策略"
        height="533" width="766"
        loading="lazy"
    /></p>
<p>最后添加分流规则，最简单的如图所示，目的地址不限，端口不限，协议不限，都走负载均衡策略，也就是从所有网口出</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-rule_hua52f95ea462474b0cf9ac8cb58272a1d_39444_666x444_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-rule_hua52f95ea462474b0cf9ac8cb58272a1d_39444_666x444_resize_q75_h2_box_3.webp"
        title="添加规则"
        height="444" width="666"
        loading="lazy"
    /></p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-rule-config_hu5f3f57b70c1748ba92fc557370ed1263_30177_626x380_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/mwan-rule-config_hu5f3f57b70c1748ba92fc557370ed1263_30177_626x380_resize_q75_h2_box_3.webp"
        title="规则配置"
        height="380" width="626"
        loading="lazy"
    /></p>
<p>在状态面板可以看到，多拨成功</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/openwrt/status_hu8611a9ab490101676948cbbd5cc19e0d_17650_793x220_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/openwrt/status_hu8611a9ab490101676948cbbd5cc19e0d_17650_793x220_resize_q75_h2_box_3.webp"
        title="多拨成功"
        height="220" width="793"
        loading="lazy"
    /></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon icon-lightbulb"></i>技巧<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">mwan3代码在：<a href="https://github.com/openwrt/packages/tree/master/net/mwan3" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/openwrt/packages/tree/master/net/mwan3</a></div>
        </div>
    </div>
<h2 id="爱快分流很强大"><a href="#爱快分流很强大" class="header-mark headerLink">爱快，分流很强大</a></h2>
<p>正好我在的实验室里有老旧的台式机，又有多个网卡，我就安装了以分流著称的iKuai系统</p>
<p>爱快路由系统对性能要求很高，64位甚至要求4G运存才能安装，不太建议宿舍用，不过实话实话这个是真的爽</p>
<p>首先在网路设置中，选择正确的物理网卡，接入方式选<code>基于物理网卡的混合模式</code>，在DHCP模式下添加多个虚拟网络接口，mac地址自己指定</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/ikuai/add-wan-if_hu684daeba6b87130d2284bdfe353c3f23_139130_719x426_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/ikuai/add-wan-if_hu684daeba6b87130d2284bdfe353c3f23_139130_719x426_resize_q75_h2_box_3.webp"
        title="添加网络接口"
        height="426" width="719"
        loading="lazy"
    /></p>
<p>关开网络接口，让其DHCP获取到IP地址，然后按照之前说的方法进行网络认证</p>
<p>然后进入分流设置，配置多线负载</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/ikuai/load-balance_huee21e4efc6f414d5c51608629c69f835_46739_599x128_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/ikuai/load-balance_huee21e4efc6f414d5c51608629c69f835_46739_599x128_resize_q75_h2_box_3.webp"
        title="负载均衡"
        height="128" width="599"
        loading="lazy"
    /></p>
<p>添加的时候有多种负载模式可供选择，可以添加多个负载规则。注意要把前面创建的网络接口全部开启</p>
<p><img
        
        src="/posts/tutorials/campus-network-speed-overlay/ikuai/add-load-balance_hu0871626870399a0d506d030ec9889f3e_19308_664x344_resize_q75_h2_box_3.webp"
        alt="/posts/tutorials/campus-network-speed-overlay/ikuai/add-load-balance_hu0871626870399a0d506d030ec9889f3e_19308_664x344_resize_q75_h2_box_3.webp"
        title="负载均衡"
        height="344" width="664"
        loading="lazy"
    /></p>
<p>对！就是这么简单，iKuai就是牛，已经把网速叠加成功了</p>
<h2 id="新发现"><a href="#新发现" class="header-mark headerLink">新发现</a></h2>
<p>在与同学的交流中，发现校园网还可以用任意手机号验证码登录，登陆后的权限是访客，不过与学生权限一样，如此看来可以利用多个手机号突破5台设备的限制了</p>
<p>注意，登录成功后一定要修改密码，否则第二次登录的时候会提示创建新账号失败，是后台的BUG，日</p>
<p>最后，向大家推荐一个讲iptables的视频，可以在Youtube或者Bilibili搜索<code>坏人的iptables小讲堂</code>，讲的真的很不错</p>
]]></description></item><item><title>使用iptables将ubuntu配置为路由器</title><link>https://zu1k.com/posts/linux/ubuntu-iptables-nat/</link><pubDate>Wed, 18 Mar 2020 13:15:40 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/linux/ubuntu-iptables-nat/</guid><description><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="header-mark headerLink">实验环境</a></h2>
<blockquote>
<p>使用 vmware 分别创建win7和ubuntu两个虚拟机</p>
</blockquote>
<h3 id="ubuntu-1804"><a href="#ubuntu-1804" class="header-mark headerLink">ubuntu 18.04</a></h3>
<p>充当网关路由器</p>
<p>网卡1(WAN口)：桥接公网</p>
<p>网卡2(LAN口)：vmnet15</p>
<p><img
        
        src="/posts/linux/ubuntu-iptables-nat/ubuntuvm_hud434d12cf95ba8059a71adbe8877d0e5_19615_721x396_resize_q75_h2_box_3.webp"
        alt="/posts/linux/ubuntu-iptables-nat/ubuntuvm_hud434d12cf95ba8059a71adbe8877d0e5_19615_721x396_resize_q75_h2_box_3.webp"
        title="win7"
        height="396" width="721"
        loading="lazy"
    /></p>
<h3 id="win7"><a href="#win7" class="header-mark headerLink">win7</a></h3>
<p>充当内网客户机</p>
<p>网卡：vmnet15</p>
<blockquote>
<p>vmnet15不使用vmware的配置，使用一个空的vmnet</p>
</blockquote>
<p><img
        
        src="/posts/linux/ubuntu-iptables-nat/win7vm_hu45a1ac92f61f87be9ca3edfa90f8ddf5_18844_702x379_resize_q75_h2_box_3.webp"
        alt="/posts/linux/ubuntu-iptables-nat/win7vm_hu45a1ac92f61f87be9ca3edfa90f8ddf5_18844_702x379_resize_q75_h2_box_3.webp"
        title="win7"
        height="379" width="702"
        loading="lazy"
    /></p>
<h2 id="ubuntu-配置"><a href="#ubuntu-配置" class="header-mark headerLink">ubuntu 配置</a></h2>
<h3 id="开启ipv4-forward"><a href="#开启ipv4-forward" class="header-mark headerLink">开启ipv4 forward</a></h3>
<p>修改 <code>/etc/sysctl.conf</code> 开启ipv4的forward功能，将下面的注释打开，如果没有手动添加。</p>
<p><img
        
        src="/posts/linux/ubuntu-iptables-nat/ipv4forward_hub479f7817a930c92e9a8b330035e6521_7231_736x150_resize_q75_h2_box_3.webp"
        alt="/posts/linux/ubuntu-iptables-nat/ipv4forward_hub479f7817a930c92e9a8b330035e6521_7231_736x150_resize_q75_h2_box_3.webp"
        title="forward"
        height="150" width="736"
        loading="lazy"
    /></p>
<p><code>sysctl -p</code> 生效</p>
<h3 id="配置网卡信息"><a href="#配置网卡信息" class="header-mark headerLink">配置网卡信息</a></h3>
<p><code>ip addr</code> 查看所有网卡的名称和信息</p>
<p>ubuntu18.04使用netplan管理网络，修改其配置文件</p>
<p><code>sudo nano /etc/netplan/50-cloud-init.yaml</code></p>
<p><img
        
        src="/posts/linux/ubuntu-iptables-nat/ubuntu-net_huf1653534e9c6e3b4a4ab229b48c8e6f7_19047_711x369_resize_q75_h2_box_3.webp"
        alt="/posts/linux/ubuntu-iptables-nat/ubuntu-net_huf1653534e9c6e3b4a4ab229b48c8e6f7_19047_711x369_resize_q75_h2_box_3.webp"
        title="net"
        height="369" width="711"
        loading="lazy"
    /></p>
<p>使用 <code>netplan try</code> 检查配置是否正确，如果正确自动应用生效</p>
<h3 id="配置iptables规则"><a href="#配置iptables规则" class="header-mark headerLink">配置iptables规则</a></h3>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">//清空已有规则防止干扰
</span></span><span class="line"><span class="cl">iptables -F
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//进、出、转发默认允许
</span></span><span class="line"><span class="cl">iptables -P INPUT ACCEPT
</span></span><span class="line"><span class="cl">iptables -P FORWARD ACCEPT
</span></span><span class="line"><span class="cl">iptables -P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//将从子网网段来的连接nat到eno33网卡<span class="o">(</span>互联网<span class="o">)</span>，ip改为外网ip
</span></span><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o eno33 -j SNAT --to-source 192.168.254.129
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//添加伪装
</span></span><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE
</span></span></code></pre></td></tr></table></div>
</div>
</div><h2 id="win7-设置"><a href="#win7-设置" class="header-mark headerLink">win7 设置</a></h2>
<p>修改网卡配置如图</p>
<p><img
        
        src="/posts/linux/ubuntu-iptables-nat/win7_hu10f4d9a4f6c13bf621a2dce366ffe3f6_83174_986x622_resize_q75_h2_box_3.webp"
        alt="/posts/linux/ubuntu-iptables-nat/win7_hu10f4d9a4f6c13bf621a2dce366ffe3f6_83174_986x622_resize_q75_h2_box_3.webp"
        title="win7"
        height="622" width="986"
        loading="lazy"
    /></p>
<p>win7即可通过ubuntu这个网关上网</p>
]]></description></item><item><title>屏蔽一个国家所有IP</title><link>https://zu1k.com/posts/linux/block-all-ips-in-a-country/</link><pubDate>Mon, 03 Dec 2018 17:55:28 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/linux/block-all-ips-in-a-country/</guid><description><![CDATA[<p>搭建了一个MTProxy，分享出去，最后发现网速跑满，连接ip数高达600多，并且还在不断增加。
查看ip来源后发现九成以上是伊朗人，后来知道原来tg在他们国家被封了，所以才导致如此。</p>
<p>所以想办法屏蔽这些ip，准确的说是一整个国家的ip,或者说是一堆ip</p>
<h2 id="使用iptables添加规则"><a href="#使用iptables添加规则" class="header-mark headerLink">使用iptables添加规则</a></h2>
<p>方法如下：
1.下载一个国家的ip段，网址：<a href="http://www.ipdeny.com/ipblocks/" target="_blank" rel="noopener noreffer" class="post-link">http://www.ipdeny.com/ipblocks/</a></p>
<p><code>wget http://www.ipdeny.com/ipblocks/data/countries/ir.zone</code></p>
<p>2.使用脚本批量添加iptables规则</p>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Block traffic from a specific country</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">COUNTRY</span><span class="o">=</span><span class="s2">&#34;ir&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">IPTABLES</span><span class="o">=</span>/sbin/iptables
</span></span><span class="line"><span class="cl"><span class="nv">EGREP</span><span class="o">=</span>/bin/egrep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="k">$(</span>id -u<span class="k">)</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;you must be root&#34;</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">resetrules<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -t nat -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -t mangle -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -X
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">resetrules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> c in <span class="nv">$COUNTRY</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nv">country_file</span><span class="o">=</span><span class="nv">$c</span>.zone
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$country_file</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> ip in <span class="nv">$IPS</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span>
</span></span><span class="line"><span class="cl">            <span class="nb">echo</span> <span class="s2">&#34;blocking </span><span class="nv">$ip</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$IPTABLES</span> -A INPUT -s <span class="nv">$ip</span> -j DROP
</span></span><span class="line"><span class="cl">        <span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">iptables-save
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table></div>
</div>
</div><h2 id="使用ipset添加ip集合"><a href="#使用ipset添加ip集合" class="header-mark headerLink">使用ipset添加ip集合</a></h2>
<p>发现用iptables直接添加ip实在低效，可以用其扩展ipset直接添加一个集合。</p>
<p>什么是IP集?</p>
<p>这时候就是IP集登场了。IP集是一个内核特性，它允许多个（独立）IP地址、MAC地址或者甚至是端口号被编码和有效地存储在位图/哈希内核数据结构中。一旦IP集创建之后，你可以创建一条iptables规则来匹配这个集合。</p>
<p>你马上就会看见IP集合的好处了，它可以让你用一条iptable规则匹配多个ip地址！你可以用多个IP地址和端口号的方式来构造IP集，并且可以动态地更新规则而没有性能影响。
在Linux中安装IPset工具</p>
<p>为了创建和管理IP集，你需要使用称为ipset的用户空间工具。</p>
<p>要在Debian、Ubuntu或者Linux Mint上安装：</p>
<p><code>$ sudo apt-get install ipset</code></p>
<p>Fedora或者CentOS/RHEL 7上安装：</p>
<p><code>$ sudo yum install ipset</code></p>
<p>使用IPset命令禁止IP</p>
<p>让我通过简单的示例告诉你该如何使用ipset命令。</p>
<p>首先，让我们创建一条新的IP集，名为banthis（名字任意）：</p>
<p><code>$ sudo ipset create banthis hash:net</code></p>
<p>第二个参数(hash:net)是必须的，代表的是集合的类型。IP集有多个类型。hash:net类型的IP集使用哈希来存储多个CIDR块。如果你想要在一个集合中存储单独的IP地址，你可以使用hash:ip类型。</p>
<p>一旦创建了一个IP集之后，你可以用下面的命令来检查：</p>
<p><code>$ sudo ipset list</code></p>
<p>这显示了一个可用的IP集合列表，并有包含了集合成员的详细信息。默认上，每个IP集合可以包含65536个元素（这里是CIDR块）。你可以通过追加&quot;maxelem N&quot;选项来增加限制。</p>
<p><code>$ sudo ipset create banthis hash:net maxelem 1000000</code></p>
<p>现在让我们来增加IP块到这个集合中：</p>
<p><code>$ sudo ipset add banthis 1.1.1.1/32</code>
<code>$ sudo ipset add banthis 1.1.2.0/24</code>
<code>$ sudo ipset add banthis 1.1.3.0/24</code>
<code>$ sudo ipset add banthis 1.1.4.10/24</code></p>
<p>这一步可以使用shell脚本自动添加</p>
<p>你会看到集合成员已经改变了。</p>
<p><code>$ sudo ipset list</code></p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&quot;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&rdquo;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在让我们创建一条让之前那些IP块不能通过80端口访问web服务的iptable规则。可以通过下面的命令：</p>
<p><code>$ sudo iptables -I INPUT -m set --match-set banthis src -p tcp --destination-port 80 -j DROP</code></p>
<p>如果你愿意，你可以保存特定的IP集到一个文件中，以后可以从文件中还原：</p>
<p><code>$ sudo ipset save banthis -f banthis.txt</code>
<code>$ sudo ipset destroy banthis</code>
<code>$ sudo ipset restore -f banthis.txt</code></p>
<h2 id="自用脚本"><a href="#自用脚本" class="header-mark headerLink">自用脚本</a></h2>
<div class="highlight"><div class="chroma">
<div class="table-wrapper"><table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">EGREP</span><span class="o">=</span>/bin/egrep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">con_file</span><span class="o">=</span><span class="nv">$1</span>.zone
</span></span><span class="line"><span class="cl"><span class="nv">ipset</span><span class="o">=</span><span class="nv">$1</span>ip
</span></span><span class="line"><span class="cl">wget http://www.ipdeny.com/ipblocks/data/countries/<span class="nv">$con_file</span>
</span></span><span class="line"><span class="cl">ipset creat <span class="nv">$ipset</span> hash:net    
</span></span><span class="line"><span class="cl"><span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$con_file</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> ip in <span class="nv">$IPS</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    ipset add <span class="nv">$ipset</span> <span class="nv">$ip</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">rm <span class="nv">$con_file</span>
</span></span><span class="line"><span class="cl">iptables -I INPUT -m <span class="nb">set</span> --match-set <span class="nv">$ipset</span> src -p tcp --destination-port <span class="m">6666</span> -j DROP
</span></span><span class="line"><span class="cl">iptables-save
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table></div>
</div>
</div><h2 id="参考文章"><a href="#参考文章" class="header-mark headerLink">参考文章：</a></h2>
<p><a href="https://www.jb51.net/Linuxjishu/339309.html" target="_blank" rel="noopener noreffer" class="post-link">在Linux下实现批量屏蔽IP地址的方法</a></p>
]]></description></item></channel></rss>