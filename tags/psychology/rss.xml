<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>心理学 - 标签 - zu1k</title><link>https://zu1k.com/tags/psychology/</link><description>社会中人的心理研究，人类怪异行为观察</description><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://zu1k.com/tags/psychology/" rel="self" type="application/rss+xml"/><item><title>DeepL Api 设计中的欺骗战术</title><link>https://zu1k.com/posts/thinking/deception-tactics-in-deepl-api-design/</link><pubDate>Sat, 02 Apr 2022 12:28:18 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/deception-tactics-in-deepl-api-design/</guid><description><![CDATA[
        <p>这篇博文本应该在去年完成 DeepL 客户端逆向的时候发布，但考虑到相关细节一旦公开，恐怕会被广泛采用而被 DeepL 官方封杀，因此迟迟未开始。前段时间我发布了 <a href=https://hub.docker.com/r/zu1k/deepl target=_blank rel="noopener noreffer" class=post-link>DeepL Free Api 的 Docker 镜像</a>，也在 <a href=https://github.com/zu1k/deepl-api-rs target=_blank rel="noopener noreffer" class=post-link>GitHub 上公开了相关二进制程序</a>，就下载量来看已经有不少人在使用了，相信 DeepL 不久就会有动作，因此我认为现在已经可以公开相关细节。</p><p>我逆向的是 DeepL 的 Windows 客户端，因为是 <code>C#</code> 开发依附于 <code>.net</code>，也未进行任何混淆和加壳，可以轻松逆出源码。通过前段时间与一些其他研究者交流，我认为已经有不少感兴趣的同学也进行了逆向，也许是一种默契，都害怕 DeepL 在发觉后进行修改，所以大家也都没有对外公开，目前网络中搜不到任何相关的内容。本文的目的是给相关小伙伴一点思路，不过希望大家还是不要直接公开代码，以继续欺骗 DeepL，让其相信还没有人发现他们的把戏。</p><p>在我实现 DeepL Free Api 的过程中，我发现 DeepL 并没有像之前见到的一些接口设计那样，通过签名等手段来避免接口滥用，相反，他们使用了一些欺骗战术来混淆视听，从而尝试让抓包分析者放弃，本文将围绕此进行讨论。</p><h2 id=过程><a href=#过程 class="header-mark headerLink">过程</a></h2><p>进入研究生阶段，为了方便阅读论文，为自己开发了划词翻译工具，在众多翻译引擎中 DeepL 的效果尤为出色。DeepL 官方的 Api 需要绑定信用卡进行认证，但其并未在中国大陆经营业务，所以并不支持国内的信用卡。我也尝试过从淘宝购买别人用国外信用卡认证过的帐号，价格贵不说，在没有滥用的情况下，DeepL 在两个月内封禁了我的帐号，因此我决定用一些其他手段。</p><p>考虑到 DeepL 有提供免费版本的翻译服务，支持 Web，Windows、Android 和 iOS 都有相应的客户端，我便想使用这些客户端使用的免费接口。不出所料，在广泛使用打包和混淆技术的当下，DeepL 的 Web 端 js 代码也不是人看的东西，但通过简单的抓包，我发现其接口参数非常清晰，根本没有额外的签名、token等认证技术，我觉得自己又行了，几行 Python 代码便完成了接口对接工作。</p><p>但测试下来，我发现当修改翻译内容，有极大概率遇到 429 <code>Too many requests</code>，并且一旦出现 429，后续的所有请求便都是 429 了。</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span><span class=lnt>7
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-json data-lang=json><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;jsonrpc&#34;</span><span class=p>:</span> <span class=s2>&#34;2.0&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;error&#34;</span><span class=p>:{</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;code&#34;</span><span class=p>:</span><span class=mi>1042902</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;message&#34;</span><span class=p>:</span><span class=s2>&#34;Too many requests.&#34;</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>在 GitHub 搜索之后，我发现已经有前人尝试利用过 DeepL 的免费接口了，早在 2018 年他们就已经遇到了这个 429 问题，并且到现在都没有解决。</p><p>我尝试转向客户端的免费接口，苹果设备可以轻松 MITM，于是我便在 iPad 上对 DeepL 客户端进行抓包，让我意想不到的是，客户端的请求竟然比 Web 端的简单不少，接口参数数量仅有必须的几个，非常有利于利用。于是我又觉得自己行了，两三行 Python 代码完成接口对接。</p><p>简单测试，我又傻眼了。伪造的请求明明跟客户端发起的完全相同，但只要一更换翻译的内容，返回马上就变成 429。干！我都开始怀疑自己了。</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span><span class=lnt>11
</span><span class=lnt>12
</span><span class=lnt>13
</span><span class=lnt>14
</span><span class=lnt>15
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-json data-lang=json><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;jsonrpc&#34;</span><span class=p>:</span> <span class=s2>&#34;2.0&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;method&#34;</span><span class=p>:</span> <span class=s2>&#34;LMT_handle_texts&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;params&#34;</span><span class=p>:</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;texts&#34;</span><span class=p>:</span> <span class=p>[{</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;text&#34;</span><span class=p>:</span> <span class=s2>&#34;translate this, my friend&#34;</span>
</span></span><span class=line><span class=cl>        <span class=p>}],</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;lang&#34;</span><span class=p>:</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;target_lang&#34;</span><span class=p>:</span> <span class=s2>&#34;ZH&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;source_lang_user_selected&#34;</span><span class=p>:</span> <span class=s2>&#34;EN&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=p>},</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;timestamp&#34;</span><span class=p>:</span> <span class=mi>1648877491942</span>
</span></span><span class=line><span class=cl>    <span class=p>},</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;id&#34;</span><span class=p>:</span> <span class=mi>12345</span><span class=p>,</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>你自己看看，这个接口多么清楚明白，但怎么就伪造不了呢？</p><p>我想了又想，这里面也就 <code>id</code> 比较可疑，因为这个参数我不知道它是怎么生成的，是随机的还是根据某种规则计算出来的，我们无从知道。但从目前结果来看，随机的 <code>id</code> 无法被服务器认可。</p><p>当然，我也考虑过其他的服务端判断滥用的方法，例如某些 http 头、ssl 层面的方法（例如之前 Go 实现中 SSL 协商过程中加密算法的顺序等），我也想办法进行了伪造，可就是不行。疲惫了，不想搞了。</p><p>第二天，突然想起他的 Windows 客户端，稍微一分析惊喜的发现是 <code>C#</code>，还没加壳，果断扔进 <code>dnSpy</code>，发现也没混淆，真是柳暗花明又一村啊。分析之后，也就一切都清楚明白了，原来 DeepL 根本一开始就在想方设法让你觉得你行啊。</p><p>看前面那个接口的参数，我之所以觉得我行，就是因为这个接口它太简单了。接口的参数少，参数含义又非常明确，它并不像某些厂那样用一些不知所以然的缩写，这里的每一个参数，它的名称都在告诉我它的含义、它是干什么的以及它是怎么生成的。</p><p><code>jsonrpc</code> 是版本号，<code>method</code> 是方法，一个固定的字符串。<code>params</code> 里面 <code>texts</code> 是多段待翻译的文本，<code>lang</code> 里面是翻译的语言选项，是枚举类型。<code>timestamp</code> 是 UNIX 风格的时间戳，<code>id</code> 就是序号。大眼一看，这里面只有 <code>id</code> 是最可疑的，这也确实是我最初犯的错误。</p><h2 id=真相><a href=#真相 class="header-mark headerLink">真相</a></h2><p>现在我来告诉你，DeepL 到底是怎么认证的。（下面并不是 DeepL 客户端的代码，是我写的 Rust 利用代码，但逻辑不变）</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-Rust data-lang=Rust><span class=line><span class=cl><span class=k>fn</span> <span class=nf>gen_fake_timestamp</span><span class=p>(</span><span class=n>texts</span>: <span class=kp>&amp;</span><span class=nb>Vec</span><span class=o>&lt;</span><span class=nb>String</span><span class=o>&gt;</span><span class=p>)</span><span class=w> </span>-&gt; <span class=kt>u128</span> <span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=kd>let</span><span class=w> </span><span class=n>ts</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>tool</span>::<span class=n>get_epoch_ms</span><span class=p>();</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=kd>let</span><span class=w> </span><span class=n>i_count</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>texts</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>.</span><span class=n>iter</span><span class=p>()</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>.</span><span class=n>fold</span><span class=p>(</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>                </span><span class=mi>1</span><span class=p>,</span><span class=w> 
</span></span></span><span class=line><span class=cl><span class=w>                </span><span class=o>|</span><span class=n>s</span><span class=p>,</span><span class=w> </span><span class=n>t</span><span class=o>|</span><span class=w> </span><span class=n>s</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=n>t</span><span class=p>.</span><span class=n>text</span><span class=p>.</span><span class=n>matches</span><span class=p>(</span><span class=sc>&#39;i&#39;</span><span class=p>).</span><span class=n>count</span><span class=p>()</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>)</span><span class=w> </span><span class=k>as</span><span class=w> </span><span class=kt>u128</span><span class=p>;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=n>ts</span><span class=w> </span><span class=o>-</span><span class=w> </span><span class=n>ts</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=n>i_count</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=n>i_count</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=p>}</span><span class=w>
</span></span></span></code></pre></td></tr></table></div></div></div><p>哈哈！没想到吧！人家的时间戳不是真的！</p><p>DeepL 先计算了文本中所有 <code>i</code> 的数量，然后对真正的时间戳进行一个小小的运算 <code>ts - ts % i_count + i_count</code>，这个运算差不多仅会改变时间戳的毫秒部分，这个改变如果用人眼来验证根本无法发现，人类看来就是一个普通的时间戳，不会在意毫秒级的差别。</p><p>但是 DeepL 拿到这个修改后的时间戳，既可以与真实时间对比(误差毫秒级)，又可以通过简单的运算（是否是 <code>i_count</code> 的整倍数）判断是否是伪造的请求。真是精妙啊！</p><p>还有更绝的！你接着看：</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span><span class=lnt>7
</span><span class=lnt>8
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-Rust data-lang=Rust><span class=line><span class=cl><span class=kd>let</span><span class=w> </span><span class=n>req</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>req</span><span class=p>.</span><span class=n>replace</span><span class=p>(</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s>:</span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=p>,</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=k>if</span><span class=w> </span><span class=p>(</span><span class=bp>self</span><span class=p>.</span><span class=n>id</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=mi>3</span><span class=p>)</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=mi>13</span><span class=w> </span><span class=o>==</span><span class=w> </span><span class=mi>0</span><span class=w> </span><span class=o>||</span><span class=w> </span><span class=p>(</span><span class=bp>self</span><span class=p>.</span><span class=n>id</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=mi>5</span><span class=p>)</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=mi>29</span><span class=w> </span><span class=o>==</span><span class=w> </span><span class=mi>0</span><span class=w> </span><span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>        </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s> : </span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=p>}</span><span class=w> </span><span class=k>else</span><span class=w> </span><span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>        </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s>: </span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=p>},</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=p>);</span><span class=w>
</span></span></span></code></pre></td></tr></table></div></div></div><p>怎么样？我觉得我一开始就被玩弄了，人家的 <code>id</code> 就是纯粹的随机数，只不过后续的请求会在第一次的随机 <code>id</code> 基础上加一，但是这个 <code>id</code> 还决定了文本中一个小小的、微不足道的空格。</p><p>按照正常的思路，为了方便人类阅读和分析，拿到请求的第一时间，我都会先扔编辑器里格式化一下 Json，我怎么会想到，这恰恰会破坏掉人家用来认证的特征，因此无论我如何努力都难以发现。</p><h2 id=总结><a href=#总结 class="header-mark headerLink">总结</a></h2><p>在我以往的经验中，接口防滥用，要不就是用户专属的 token，要不就是对请求进行签名或者加密，这些对抗滥用的方法都是明面上的，就是明白告诉你我有一个签名，怎么签的，你去分析去吧，但是我代码混淆了，你看看你是要头发还是要算法。</p><p>要不就是高级点的，更具技术性的，利用某些客户端特有的实现造成的特征进行认证，我印象中最深刻的就是 <a href=https://www.zackwu.com/posts/2021-03-14-why-i-always-get-503-with-golang/ target=_blank rel="noopener noreffer" class=post-link>Go 的 SSL 协商过程中的算法顺序</a>。这类方法要求更高的技术，当然分析起来也肯定更加困难，并且找到这样一种方法本身也不容易。</p><p>从 DeepL 的方法中，我找到了另外一种思路。利用人心理的弱点，一开始让其感觉非常简单，但是无论如何都无法得到想要的结果，给分析者造成心理上的打击和自我怀疑，让其浅尝辄止自行放弃分析。同时利用人行为上的惯式，使其自行破坏掉某些关键信息，从而给分析造成难以发现的阻碍。</p><p>原来，除了技术以外，还有这样一条道路啊，真是有趣！</p>]]></description></item></channel></rss>