<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>网络 - 标签 - zu1k</title><link>https://zu1k.com/tags/network/</link><description/><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://zu1k.com/tags/network/" rel="self" type="application/rss+xml"/><item><title>谁不想要 2^64 个 IP 的代理池 ？</title><link>https://zu1k.com/posts/tutorials/http-proxy-ipv6-pool/</link><pubDate>Sat, 07 May 2022 19:21:25 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/tutorials/http-proxy-ipv6-pool/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>昨天我舍友为了爬虫购买了昂贵的 IP 代理池，我在旁边突然萌生了一个想法，现在各大 ISP/IDC 动不动就给你分配一整个 64 位前缀的 IPv6 网段，我们能不能好好利用一下这庞大的 IPv6 IP 资源呢？</p>
<p>有了这个想法我就睡不着了，今天一大早（9点半）我就起来着手研究，最终成功实现每一个请求从一个单独的 IPv6 地址发出。</p>
<p>先看效果，我把写好的程序放在服务器上跑了一会，下面是 Cloudflare 统计的访问信息，可以看到独立访问者 (独立 IP) 数量达到了我的小博客前所未有的数量，基本上是一个请求一个独立 IP，效果非常不错。</p>
<p>


    
        
        
    
</p>
<h2 id="教程">教程</h2>
<p>首先你要有一整个 IPv6 子网路由给你，当遇到吝啬的服务商，即使他们有巨多的 IPv6 资源，他也不给你用，这种情况你没辙。不过幸好，绝大多数 ISP/IDC 都会给你一整个 IPv6 <code>/64</code> 子网，有的甚至可以申请 <code>/56</code> 子网，这数量又增加了好几个数量级，所以你几乎不必担心。</p>
<p>为了方便实验，我购买了 <a href="https://www.vultr.com/?ref=9039594-8H" target="_blank" rel="noopener noreffer" class="post-link">[Vultr 的服务器]</a>，如果你还没有注册，可以使用我的 <a href="https://www.vultr.com/?ref=9039594-8H" target="_blank" rel="noopener noreffer" class="post-link">[AFF 链接]</a>.</p>
<p>你可以通过 <code>ip a</code> 命令查看网络接口的地址，从而获取你的 IPv6 子网信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ip a
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">2: enp1s0: &lt;BROADCAST,MULTICAST,ALLMULTI,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc fq state UP group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    ......
</span></span><span class="line"><span class="cl">    inet6 2001:19f0:6001:48e4:5400:3ff:fefa:a71d/64 scope global dynamic mngtmpaddr 
</span></span><span class="line"><span class="cl">       valid_lft 2591171sec preferred_lft 603971sec
</span></span><span class="line"><span class="cl">    inet6 fe80::b155:e257:a8f7:6940/64 scope link stable-privacy 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，默认给你的 IPv6 地址是动态的，这是由 SLAAC 协议根据前缀和 Mac 地址自动生成的; 还有一个 <code>fe80</code> 开头的 IPv6 地址，这也是自动分配的本地链路地址。这很好，通过这些无状态地址配置协议，使 IPv6 避免的手动配置，即插即用。</p>
<p>在我的试验中，我拿到的子网为 <code>2001:19f0:6001:48e4::/64</code>，下面都以此为基础。</p>
<p><strong>绑定和路由</strong></p>
<p>在拿到 IPv6 子网后，需要添加路由。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># ip addr add local 2001:19f0:6001:48e4::/64 dev lo </span>
</span></span><span class="line"><span class="cl"><span class="c1"># 纠正：无需添加地址，这一行只能添加一个地址。我们通过 ip_nonlocal_bind 来允许绑定</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip route add <span class="nb">local</span> 2001:19f0:6001:48e4::/64 dev enp1s0
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了能够绑定任意 IP，我们需要开启内核的 <code>ip_nonlocal_bind</code> 特性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sysctl net.ipv6.ip_nonlocal_bind<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NDP</strong></p>
<p>类似于 IPv4 中 ARP 协议的作用，IPv6 中需要使用 <code>ND</code> 协议来发现邻居并确定可用路径。我们需要开启一个 <code>ND</code> 代理：</p>
<p>安装 <code>ndppd</code>: <code>apt install ndppd</code></p>
<p>编辑 <code>/etc/ndppd.conf</code> 文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">route-ttl 30000
</span></span><span class="line"><span class="cl">proxy enp1s0 {
</span></span><span class="line"><span class="cl">    router no
</span></span><span class="line"><span class="cl">    timeout 500
</span></span><span class="line"><span class="cl">    ttl 30000
</span></span><span class="line"><span class="cl">    rule 2001:19f0:6001:48e4::/64 {
</span></span><span class="line"><span class="cl">        static
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动 <code>ndppd</code>: <code>systemctl start ndppd</code></p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>只有使用 ND 协议进行主机发现的时候才需要开启 NDP。</p>
<p>如果整个子网是直接路由过来，则无需进行这一步。例如使用 Linode 或 He.com Tunnelbroker</p>
</div>
        </div>
    </div>
<p><strong>验证</strong></p>
<p>接下来你可以验证一下了，用 <code>curl --interface</code> 指定出口 IP：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ curl --interface 2001:19f0:6001:48e4::1 ipv6.ip.sb
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4::1
</span></span><span class="line"><span class="cl">$ curl --interface 2001:19f0:6001:48e4::2 ipv6.ip.sb
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4::2
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，能够按照我们指定的任意 IP 进行请求</p>
<h2 id="http-代理">Http 代理</h2>
<p>为了方便使用，使用 Rust 写了一个 http 代理服务端，每一个请求会走指定 IPv6 子网下随机 IP，算是一个基础 demo</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">./http-proxy-ipv6-pool -b 127.0.0.1:51080 -i 2001:19f0:6001:48e4::/64
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ <span class="k">while</span> true<span class="p">;</span> <span class="k">do</span> curl -x http://127.0.0.1:51080 ipv6.ip.sb<span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:971e:f12c:e2e7:d92a
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:6d1c:90fe:ee79:1123
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:f7b9:b506:99d7:1be9
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:a06a:393b:e82f:bffc
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:245f:8272:2dfb:72ce
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:df9e:422c:f804:94f7
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:dd48:6ba2:ff76:f1af
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:1306:4a84:570c:f829
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:6f3:4eb:c958:ddfa
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:aa26:3bf9:6598:9e82
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:be6b:6a62:f8f7:a14d
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:b598:409d:b946:17c
</span></span></code></pre></td></tr></table>
</div>
</div><p>欢迎 Star: <a href="https://github.com/zu1k/http-proxy-ipv6-pool" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/zu1k/http-proxy-ipv6-pool</a></p>
<h2 id="碎碎念">碎碎念</h2>
<!-- ### Proxypool 项目

舍友要买代理池，我就去 GitHub 上搜了一下，没想到我之前早已停更的项目竟然排在第一位。

![GitHub 搜 proxypool](github-proxypool.png)

排名第二的是专门给爬虫准备的代理池，作者是我的师兄，他对爬虫有非常深入的研究，推荐给大家。 -->
<h3 id="一开始的想法">一开始的想法</h3>
<p>其实我一开始的想法并不是直接给接口附加整个 IP 段的。一开始我并不知道网络接口可以直接附加一整个 IP 段，考虑到这个 IPv6 段数量过于庞大，通过枚举给接口附加多个静态 IP 显然不现实，所以我就在想办法去自己封装 IP 包然后进行注入。</p>
<p>我想到了两个注入数据包的方案：</p>
<ol>
<li>可以完全自己封装 IPv6 包以及下层协议，通过网卡的 raw fd 直接写数据</li>
</ol>
<p>这个方案在我想到的一瞬间我就放弃了，因为协议过于复杂，我根本不可能实现</p>
<ol start="2">
<li>创建一个 TUN 设备，配置这个 TUN 设备的网段为 IPv6 子网，然后将 TUN 设备和真实网络设备创建网桥。</li>
</ol>
<p>通过 TUN 向系统网络栈注入源 IP 为网段下随机的 IPv6 地址，伪造有众多 host 的假象。</p>
<p>因为前面稍微了解过 TUN (可以看我之前写的文章<a href="../../coding/tun-mode/" rel="" class="post-link">[使用 TUN 的模式]</a>)，所以自然而然我就会有这个想法，并且我深信这是可行的。我之所以认为这样可行，是因为之前搞过 <a href="../../coding/set-ipv6-for-every-docker-container/" rel="" class="post-link">[给每一个 Docker 容器一个独立的 IP]</a>，同样是充分利用丰富的 IPv6 资源，感兴趣的同学可以看一下。</p>
<p>通过搜索资料，最后确定使用 TUN 不可行，至少要用 TAP，<a href="https://serverfault.com/questions/949945/ipv6-on-Linux-tun-tap-ndp-not-working" target="_blank" rel="noopener noreffer" class="post-link">[因为要处理 NDP 协议]</a>，具体后面的细节我也没有深入研究。</p>
<p>幸亏后面搜资料发现了本文方便的方法，才避免了我陷入这些迷途。反思一下，即自己的知识不够，对 Linux 内核及其提供的众多功能了解不够深入，导致人家原本就有的功能自己根本不知道，所以想不出合适的方案。</p>
<h3 id="waf">WAF</h3>
<p>我也不是非常了解，现在的 WAF 是不是就是单纯根据 IP 来进行限流限速 ？如果真是这样，那利用这庞大的 IPv6 资源岂不是轻松绕过封禁。</p>
<p>如果是会直接封禁或者限制整个子网，会不会有很严重的误杀，毕竟不是所有 ISP 都会这么大方的给一整个 IP 段。</p>
<p>有了解的小伙伴欢迎评论交流。</p>
]]></description></item><item><title>使用 TUN 的模式</title><link>https://zu1k.com/posts/coding/tun-mode/</link><pubDate>Tue, 22 Mar 2022 22:01:18 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/coding/tun-mode/</guid><description><![CDATA[<p><strong>TUN</strong> 是内核提供的三层虚拟网络设备，由软件实现来替代真实的硬件，相当于在系统网络栈的三层(网络层)位置开了一个口子，将符合条件(路由匹配)的三层数据包交由相应的用户空间软件来处理，用户空间软件也可以通过TUN设备向系统网络栈注入数据包。可以说，TUN设备是用户空间软件和系统网络栈之间的一个通道。</p>
<blockquote>
<p><strong>TAP</strong> 是二层(以太网)虚拟网络设备，处理的是以太帧，更加底层可以拿到更多信息，但不在本文的讨论范围。</p>
</blockquote>
<p>我们想要利用TUN来做一些事情，实际上就是要编写一个用户态程序，拿到 TUN 设备句柄，向其写入序列化的IP数据包，从中读取数据并还原成IP数据包进行处理，必要时需要取出其payload继续解析为相应传输层协议。</p>
<p>通常使用 TUN 技术的是 VPN 和代理程序，然而这两类程序在对待 TUN 中传递的 IP 数据包时通常有不同的行为：</p>
<ul>
<li>
<p><strong>VPN</strong> 通常做<strong>网络层</strong>的封装：将拿到的 IP 包进行加密和封装，然后通过某个连接传输到另一个网络中，在解封装和解密后，将 IP 包发送到该网络。在这个过程中，对 IP 包本身的修改是非常小的，不会涉及到整体结构的变动，通常仅会修改一下源 IP 和目标 IP ，做一下 NAT。</p>
</li>
<li>
<p><strong>代理程序</strong> 通常是<strong>传输层</strong>的代理：在从 TUN 设备拿到 IP 包后，需要继续解析其 payload，还原出 TCP 或者 UDP 结构，然后加密和封装传输层 (TCP或UDP) 的 payload。网络层的 IP 和传输层的端口信息通常会作为该连接的元数据进行处理，使用额外的加密和封装手段。</p>
</li>
</ul>
<p>简单来说，VPN 不需要解析 IP 包的 payload，而代理程序需要解析出传输层信息并处理，特别是像 TCP 这样复杂的协议，对其处理更是需要非常小心和严谨。对于代理程序这样的需求，如果我们使用 TUN 技术，通常有两种模式：在用户态实现网络栈，或者直接利用操作系统网络栈实现。</p>
<h2 id="用户态网络栈">用户态网络栈</h2>
<p>第一种选择是在用户态实现网络栈，这是不小的工程啊，特别是实现 TCP 协议，因为其协议非常复杂，实现起来有很多细节需要注意，所以自己实现非常容易犯错。所以我们一般会直接找现成的实现来用，现有不少比较成熟且高效的实现，我相信肯定比我自己写的要好几个数量级。</p>
<h3 id="网络栈实现">网络栈实现</h3>
<ul>
<li>
<p>如果使用 <strong>C</strong> 语言，<a href="https://savannah.nongnu.org/projects/lwip/" target="_blank" rel="noopener noreffer" class="post-link"><strong>lwIP</strong></a> 是一个非常不错的选择，由瑞典计算机科学研究所科学院开源，这是一个轻量级的 TCP/IP 栈实现，在占用超少内存的情况下，实现了完整的 TCP，被广泛应用到嵌入式设备中，稳定性有保证。同时，lwIP 有很多其他语言的绑定，包括 go 和 rust，这使我们在使用其他语言开发时也可以选择 lwIP 作为用户态网络栈实现。</p>
</li>
<li>
<p>如果选择使用 <strong>Go</strong> 语言开发 TUN 的用户态程序(其实这也是大多数人的选择)，可以选择 Google 开源的 <a href="https://github.com/google/gvisor/tree/master/pkg/tcpip" target="_blank" rel="noopener noreffer" class="post-link"><strong>gVisor</strong></a> 中的实现，gVisor项目目的是为容器提供自己的应用程序内核，其中 tcpip 的实现有 Google 背书，质量有保证。</p>
</li>
<li>
<p>如果选择使用 <strong>Rust</strong> 进行开发，我们的选择就会困难一点，并没有一个饱经风霜、经过时间检验的实现，在广泛对比之后我推荐 <a href="https://github.com/smoltcp-rs/smoltcp" target="_blank" rel="noopener noreffer" class="post-link"><strong>smoltcp</strong></a>，这是为裸机实时系统开发的独立的、事件驱动的 TCP/IP 栈，其设计目标是简单和健壮，应该可以信任吧。</p>
</li>
<li>
<p>当然，我觉得还有一个可以期待的实现，就是 Google 为 Fuchsia 操作系统开发的 <a href="https://cs.opensource.google/fuchsia/fuchsia/&#43;/master:src/connectivity/network/netstack3/" target="_blank" rel="noopener noreffer" class="post-link"><strong>Netstack3</strong></a>，之前是由 Go 实现的，不过现在 Google 用 Rust 重新实现了一个新的，谷歌背书，可以期待。</p>
</li>
</ul>
<h3 id="使用流程">使用流程</h3>
<p>在看完可供选择的实现后，我们来看一下在用户空间实现的网络栈如何使用。虽然不同在不同实现下，各个库有不同的编程接口和使用方法，但基本的思路都是一致的，这里我们便仅讨论基本使用流程。</p>
<h4 id="基本思路">基本思路</h4>
<p>从原理上来讲，用户态网络栈就是要不断通过协议解析，从 IPv4 数据包中不断解析出 TCP 流中的载荷数据；将传输层载荷通过不断的协议封装，拿到最终的 IPv4 数据包。</p>
<p><strong>从 TUN 往外读</strong></p>
<p>从 TUN 设备所对应的句柄中读出了一段字节序列，便是需要处理的IP数据包，一般是 IPv4 协议，不过还是需要先根据字节序列的第一个字节进行判断。</p>
<p>如果判断为 IPv4 包，就将整个字节序列扔到 IPv4 的 Packet Parser 实现中，还原出 IPv4 数据包结构。根据 IPv4 Header 中的 protocol 字段，判断 payload 应该使用哪个上层协议解析。<a href="https://datatracker.ietf.org/doc/html/rfc791#page-11" target="_blank" rel="noopener noreffer" class="post-link">rfc791</a></p>
<p>一般仅需要处理 ICMP、TCP、UDP 这三种协议，拿 TCP 为例，只需要将 IPv4 的 payload 扔到 TCP 的 Parser 中，即可取出我们想要的传输层载荷。（实际情况当然没有说的这么简单）</p>
<p><strong>向 TUN 写数据</strong></p>
<p>写的过程其实就是读的过程反过来，拿到的是某个传输层协议的 payload，就拿UDP为例，根据该数据报的元信息，构建出完整的 UDP Header，然后将 payload 内容拼接进去。</p>
<p>接下来构建 IPv4 Header，然后将 UDP 报文拼接进 IPv4 payload 中。在拿到 IPv4 数据包后，即可序列化为字节序列，写入 TUN 句柄了。</p>
<h4 id="实际使用">实际使用</h4>
<p>上面的读、写过程看起来简单，但实际需要考虑的东西非常多，包括但不限于分片、丢包、重传、流量控制等等，TCP 作为一个极其复杂的传输层协议，有巨多情况需要考虑，很明显用上面的基本思路是非常繁琐并且难以使用的。</p>
<p>众多用户态网络栈肯定考虑到了这一点，实现都提供了非常友好且直接的接口，可以直接创建一个 TCP/IP 网络栈实例，拿到两个句柄，一端负责读取和写入网络层 IP 数据包，另一端负责接收和写入传输层载荷，中间的复杂转换关系和特殊情况都被内部屏蔽掉了。</p>
<h2 id="操作系统网络栈">操作系统网络栈</h2>
<p>根据我们的需求，实际就是在 IPv4 和 TCP payload 之间进行转换，而操作系统的网络栈正好就有这个功能，我们无法简单的直接使用操作系统的网络栈代码，但是可以想办法复用操作系统网络栈提供的功能。TUN 在网络层已经打开了一个口子，还需要在传输层也打开一个口子，其实可以利用操作系统提供的 socket。</p>
<p>我们使用操作系统提供的 Socket 创建一个传输层的 Listener，将某个 IPv4 数据包的目标 IP 和目标端口修改为我们监听的 IP 和端口，然后通过 TUN 将该 IPv4 数据包注入到操作系统的网络栈中，操作系统就会自动的进行相应的解析，并将所需要的传输层 payload 通过前面创建的 Socket 发送给 Listener，由此便利用操作系统网络栈完成了 “往外读” 的操作。</p>
<p>对于“向里写”的操作，只需要向刚刚创建的传输层连接句柄写入即可，操作系统的网络栈同样会进行相应的封包，最后形成 IPv4 数据包。很明显，需要考虑反向的数据包，当向传输层连接的句柄中写入数据、操作系统的网络栈封包时，源 IP 和源端口会被视为新的目标 IP 和目标端口，因为我们需要使返回的 IPv4 数据包能够被 TUN 接口捕获到，在上面步骤中就不能只修改目标 IP 和目标端口，同时还要修改源 IP 和源端口，源 IP 应该限制为 TUN 网段中的 IP。</p>
<h3 id="工作流程">工作流程</h3>
<p>在利用操作系统网络栈时，通常是以下步骤，这里拿 TCP 协议举例。</p>
<p>在我们的例子中， TUN网络的配置为 <code>198.10.0.1/16</code>，主机IP为 <code>198.10.0.1</code>，代理客户端监听 <code>198.10.0.1:1313</code>，App想要访问 <code>google.com:80</code>，自定义的DNS服务返回<code>google.com</code>的 Fake IP <code>198.10.2.2</code>。</p>
<p><strong>1. Proxy 创建 TCP Socket Listener</strong></p>
<p>这里首先要在系统网络栈的传输层开个口子，创建一个 TCP Socket Listener，监听 <code>198.10.0.1:1313</code></p>
<p><strong>2. 某 App 发起连接</strong></p>
<p>当某需要代理的App发起连接，访问 <code>google.com:80</code>，我们通过自定义的 DNS 服务返回一个 Fake IP (<code>198.10.2.2</code>)，使流量被路由到 TUN 设备上。</p>
<blockquote>
<p>当然这里也可以不使用 Fake IP 方式来捕获流量，通过配置路由规则或者流量重定向也可以将流量导向 TUN 设备，不过 Fake IP 是最常用的方法，所以这里以此举例。</p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<p><strong>3. 将 TUN 读取到的 IPv4 解析为 TCP 载荷数据</strong></p>
<p>TUN 设备捕获到流量，也就是 IPv4 数据包，在读取出来后，需要利用系统网络栈解析出 TCP 载荷数据。</p>
<p>这一步，需要将读取到的IPv4数据包进行修改，也就是我们上面说的 源IP、源端口，目标IP和目标端口，还有相应的 checksum 也需要重新计算。修改的目的是让 IPv4 数据包通过 TUN 注入到操作系统网络栈后，能够被正确路由并通过一开始监听的TCP Socket将最里层的 TCP payload 返还给我们。</p>
<div class="mermaid" id="id-2"></div>
<p>这里为了方便，直接将源 IP 和源端口设置为初始的目标 IP 和目标端口，在实际编程时，有更多的设置策略，也就是 NAT 策略。</p>
<p><strong>4. 代理客户端请求代理服务器</strong></p>
<p>此时代理客户端已经拿到了请求的真实 TCP 载荷，并且可以通过获取 TCP 连接的 peer 信息得到在第3步修改的源 IP 和源端口，通过这些信息可以通过查 NAT 表得到 App 真正想要访问的 IP 和 端口（甚至可以通过查 DNS 请求记录拿到域名信息），因此代理客户端可以根据自己的协议进行加密和封装等操作，然后发送给代理服务端，由代理服务端进行真实的请求操作。</p>
<div class="mermaid" id="id-3"></div>
<p><strong>5. 将返回数据封包回 IPv4 并写入 TUN</strong></p>
<p>通过代理客户端与代理服务端、代理服务端与谷歌的通信，拿到谷歌真正的返回数据，现在需要重新封装回 IPv4 数据包，还是利用系统网络栈：将数据写入 TCP Socket (<code>198.10.0.1:1313</code>) 中，便可以在 TUN 侧拿到封装好的 IPv4，就是这么轻松。</p>
<div class="mermaid" id="id-4"></div>
<p><strong>6. App 拿到返回数据</strong></p>
<div class="mermaid" id="id-5"></div>
<p>上面的过程便是利用操作系统网络栈完成 IPv4 到 TCP 载荷数据及其反方向转变的过程。通过这种办法，可以充分利用操作系统的实现，都是饱经检验，质量可靠，且满足各种复杂情况。但是也有缺点，数据需要拷贝多次，增加了性能损耗和延迟。</p>
<h3 id="nat-策略">NAT 策略</h3>
<blockquote>
<p>我这里想说的 NAT 策略不是指常说的那四种 NAT 类型，当然你可以去实现不同的NAT类型来满足各种各样的需求，但那是更深入的话题，不在本文讨论。</p>
</blockquote>
<p>在刚刚的流程的第3步中，你应该发现对源 IP 和源端口的修改是有限制的，我们需要将 IP 限定为 TUN 网段，从而使返回的数据包可以重新被 TUN 设备捕获。但是这种限制是非常宽松的，在我们的例子对 TUN 设备网段的配置中，你有 2^16 个 IP 可供选择，每一个 IP 又有 2^16 个端口可供选择。</p>
<p>但是如果你仔细观察，你会发现上面的例子并没有充分利用这些资源，我们仅仅是将 Fake IP 作为源 IP、真实目标端口作为源端口，而这个 IP 的其他端口都被闲置了。同时我也在其他人写的某些程序中发现，他们仅选择一个 IP 设置为源 IP，通过合理的分配该 IP 的端口作为源端口，在这种情况下， TUN 网段中其余的 IP 资源就被浪费了。</p>
<p>以上两种 NAT 策略在个人电脑上没啥问题，但是如果代理客户端运行在网关上，网络中访问的 IP 数量超过网段中 IP 数量上限，或者 hash(ip:port) 数量超过端口总数(2^16)，就会难以继续分配 NAT 项。因此我们应该专门编写一个 NAT 管理组件，合理分配 IP 和端口资源，争取做到利用最大化。</p>
<h2 id="防止环路">防止环路</h2>
<p>抛开事实不谈，如果我们想要代理全部流量，就是要通过路由规则将所有流量导向我们的 TUN 设备，这是很直观且朴素的想法，就像下面的命令一样单纯：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo route add -net 0.0.0.0/0 dev tun0
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你真的这么写，你就会发现你上不了网了。这是因为出现了环路。</p>
<p>如果稍微思考一下，你就会发现，虽然我们想要代理所有流量，但是代理客户端与代理服务端的流量却是需要跳过的，如果用上面的路由，就会导致代理客户端发出的流量经过路由然后从 TUN 重新回到了代理客户端，这是一个死环，没有流量可以走出去。流量只近不出，来回转圈，你的文件打开数爆炸，操作系统不再给你分配更多的句柄，数据来回拷贝，你的CPU风扇猛转，电脑开始变卡。</p>
<p>这是我们不想看到的，需要采取一些措施避免环路的产生。在实践中有不少方法可以避免这种情况的发生，例如通过合理的配置路由规则，使连接代理服务器的流量可以顺利匹配到外部网络接口。只不过这种方法不够灵活，如果代理服务器 IP 发生变化则需要及时改变路由规则，非常麻烦，所以我们接下来介绍其他的方法。</p>
<h3 id="fake-ip">Fake IP</h3>
<p>Fake IP 就是我们上面例子中用到的方法，这是一种限制进入流量的方法。基本思路是自己实现一个 DNS 服务器，对用户的查询返回一个假的 IP 地址，我们可以将返回的 IP 地址限制为 TUN 设备的网络段，这样应用发起的流量其实便是发给 TUN 网络的流量，自然的被路由匹配，而无需像前面那样路由全部的流量，其余的流量包括代理客户端发起的请求便不会被路由，可以保证不产生环路。</p>
<p>当代理客户端需要知道应用真正想要请求的地址时，就通过一些接口向自己实现的 DNS 服务器进行反向查询即可。</p>
<h3 id="策略路由">策略路由</h3>
<p>通过前面的分析，可以发现产生环路是因为代理客户端本身发出的流量被系统路由到 TUN 设备导致的，因此我们可以想办法让代理客户端本身发起的流量不走 TUN 而是从真实的物理网络接口出去。</p>
<p>在 (类)Unix 系统中，可以对代理客户端的流量打上 fwmark 防火墙标记，然后通过策略路由使带有标记的流量走单独的路由表出去，从而绕过全局的流量捕获。</p>
<p><strong>cgroup</strong></p>
<p><code>cgroup</code> 是 Linux 内核的功能，可以用来限制、隔离进程的资源，其中 <code>net_cls</code> 子系统可以限制网络的访问。在网络控制层面，可以通过 <code>class ID</code> 确定流量是否属于某个 cgroup，因此可以对来自特定 cgroup 的流量打上 fwmark，使其能够被策略路由控制。</p>
<p>我们可以创建一个用于绕过代理的 cgroup ，对该 cgroup 下进程的流量使用默认的路由规则，而不在该 cgroup 的其余进程的流量都要路由到 TUN 设备进行代理。</p>
<h2 id="一些其他的知识">一些其他的知识</h2>
<h3 id="tun-与-tap-的区别">TUN 与 TAP 的区别</h3>
<p>TAP 在2层，读取和写入的数据需要是以太帧结构</p>
<p>TUN 在3层，读取和写入的数据需要是IP数据包结构</p>
<h3 id="ip-等配置">IP 等配置</h3>
<p>在给网卡配置IP时，其实是修改内核网络栈中的某些参数，而不是修改网卡。虽然网卡也会有一些可供修改的配置项，但一般情况是通过其他方法进行修改的(驱动程序)。</p>
<h3 id="物理网卡与虚拟网卡的区别">物理网卡与虚拟网卡的区别</h3>
<p>物理网卡会有 <strong>DMA</strong> 功能，在启用 DMA 时网卡和网络栈(内存中的缓冲区)的通讯由 DMA 控制器管理，因此性能更高延迟也更低。</p>
<h3 id="如何创建-tun-设备">如何创建 TUN 设备</h3>
<p>在Linux下一切皆文件，<code>/dev/net/tun</code> 是特殊的字符(char)设备文件，通过打开这个文件获得一个文件句柄，然后通过 <code>ioctl()</code> 系统调用对其进行配置。在这里可以选择打开TUN设备还是TAP设备，可以设置设备名称。</p>
<p>详见：<a href="https://www.kernel.org/doc/html/latest/networking/tuntap.html#network-device-allocation" target="_blank" rel="noopener noreffer" class="post-link">Network device allocation</a></p>
<h3 id="与-bpf-的关系">与 BPF 的关系</h3>
<p>BPF 是一种高级数据包过滤器，可以附加到现有的网络接口，但其本身不提供虚拟网络接口。 TUN/TAP 驱动程序提供虚拟网络接口，可以将 BPF 附加到该接口。</p>
<h2 id="扩展阅读">扩展阅读</h2>
<ul>
<li><a href="https://www.kernel.org/doc/html/latest/networking/tuntap.html" target="_blank" rel="noopener noreffer" class="post-link">https://www.kernel.org/doc/html/latest/networking/tuntap.html</a></li>
<li><a href="https://github.com/xjasonlyu/tun2socks" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/xjasonlyu/tun2socks</a></li>
<li><a href="https://github.com/eycorsican/go-tun2socks" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/eycorsican/go-tun2socks</a></li>
<li><a href="https://github.com/gfreezy/seeker" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/gfreezy/seeker</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-rust" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/shadowsocks/shadowsocks-rust</a></li>
<li><a href="https://www.wintun.net/" target="_blank" rel="noopener noreffer" class="post-link">https://www.wintun.net/</a></li>
</ul>
]]></description></item><item><title>垃圾校园网，我忍不了了</title><link>https://zu1k.com/posts/tutorials/campus-network-speed-overlay/</link><pubDate>Sun, 11 Apr 2021 17:11:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/tutorials/campus-network-speed-overlay/</guid><description><![CDATA[<p>记得大一刚入学时，免费的校园网是上下行对等的100Mbps带宽，虽然赶不上家里的速度，但是用起来还是比较舒服的</p>
<p>万万没想到，当别的学校都在忙着升级成千兆网络的时候，自己学校竟然来了个反向操作，30Mbps限速，真TMD鬼，不知道怎么想的</p>
<p>这垃圾校园网，我是忍不了了，考虑到每个人都能多个设备同时登录，肯定就有多拨的可能，那就搞起来！</p>
<h2 id="linux下手工操作">Linux下手工操作</h2>
<p>本着学习的态度，上来肯定要先在Linux下手动操作一遍（其实我是先用iKuai验证可行后，才尝试用Linux手工配的</p>
<p>我们的基本思路是：</p>
<ol>
<li>拿到多个IP</li>
<li>过了学校的联网认证</li>
<li>进行负载均衡</li>
</ol>
<p>以下所有操作都需要root权限</p>
<h3 id="利用macvlan获取多个ip">利用macvlan获取多个IP</h3>
<p>首先要创建多个虚拟网络接口，利用不同的Mac地址进行DHCP获取多个不同的IP地址</p>
<p>在Linux下，内核提供的macvlan就可以实现我们的需求，从Linux Kernel 3.9开始就支持了貌似，所以只要不是安装非常老的系统都是支持的</p>
<p>查看一下你的系统是否支持：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># modprobe macvlan</span>
</span></span><span class="line"><span class="cl"><span class="c1"># lsmod | grep macvlan</span>
</span></span><span class="line"><span class="cl">macvlan                <span class="m">24576</span>  <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果显示类似上面的内容就表示支持</p>
<p>添加一个macvlan类型的网络接口：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link &lt;physical-network-interface-name&gt; &lt;new-network-interface-name&gt; <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如，通过 <code>ip addr</code> 或者 <code>ifconfig</code> 查看到物理网卡名为 <code>eth0</code>，新网络接口名我们用 <code>vmac0</code> <code>vmac1</code> 这样的表示，命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link eth0 vmac0 <span class="nb">type</span> macvlan
</span></span><span class="line"><span class="cl">ip link add link eth0 vmac1 <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就创建了两个新的网络接口，依附于物理接口 <code>eth0</code>，两个新网络接口的mac地址是自动分配的，每一次新建都会随机生成。</p>
<p>如果想要手动指定mac地址，可以使用下面的命令:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add link &lt;physical-network-interface-name&gt; &lt;new-network-interface-name&gt; address &lt;mac-address&gt; <span class="nb">type</span> macvlan
</span></span><span class="line"><span class="cl">例如：
</span></span><span class="line"><span class="cl">ip link add link eth0 vmac0 address 11:22:33:44:55:66 <span class="nb">type</span> macvlan
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon icon-lightbulb"></i>技巧<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">更加详细的命令通过 <code>ip link help</code> 和 <code>man ip link</code> 查看</div>
        </div>
    </div>
<p>经过上面这一步，就就可以通过 <code>ip link</code> 看到多了两个网络接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">4: vmac0@eth0: &lt;BROADCAST,MULTICAST&gt; mtu <span class="m">1500</span> qdisc noop state DOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 5a:5d:f9:1e:b8:19 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">5: vmac1@eth0: &lt;BROADCAST,MULTICAST&gt; mtu <span class="m">1500</span> qdisc noop state DOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 66:50:b5:23:d8:ce brd ff:ff:ff:ff:ff:ff
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后需要获取到多个IP，直接执行 <code>dhclient</code> 即可</p>
<h3 id="进行联网认证">进行联网认证</h3>
<p>我们学校用的是深澜的认证系统，对其认证流程分析后，写了一个小工具:<a href="/posts/tutorials/campus-network-speed-overlay/sdu-srun.zip" rel="" class="post-link">多账号登录认证工具</a></p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon icon-info-circled"></i>信息<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>2021年11月4日 更新</p>
<p>用Rust写了一个新的登录工具，更轻量更好用</p>
<p><a href="https://github.com/zu1k/sdusrun" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/zu1k/sdusrun</a></p>
</div>
        </div>
    </div>
<p>在启动前先修改配置文件，username为学号，password为上网认证的密码，ip分别写刚刚 macvlan 获取到的IP</p>
<p>学校限制的每个人最多5台设备同时在线，新登录的设备会把前面的设备顶下去，所以最好联合舍友用多个人的账号进行认证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">login</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user1-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user1-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">201XXXXX2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">user2-password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.0.3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">认证成功后即可进行下面的步骤，如果认证失败需要检查账号密码是否正确，本工具也不能保证后续系统更新后仍能使用，必要时可登录认证后台手工添加mac认证白名单</div>
        </div>
    </div>
<h3 id="进行路由级别的分流">进行路由级别的分流</h3>
<p>经过上面的步骤，其实现在已经有多个可以上网的接口了，每一个接口都限速30Mbps，可以通过修改路由表验证，但是测速发现还是总速度还是30Mbps，速度并没有叠加</p>
<p>这其实是因为你的主机只有一个默认网关，流量实际上只走了一条线，所以还是受单接口限速的限制。我们的目的是让流量能够分别走多个接口，从而达到速度叠加的效果，也就是常说的负载均衡</p>
<p>思路是：通过iptables规则给数据包打上标记，然后通过策略路由根据标记来选择走哪个接口出去。需要注意不同包之间的关系，追踪连接状态并恢复标记，否则的话同一个连接的不同包走了不同的接口，会被丢弃掉。</p>
<h4 id="创建路由表">创建路由表</h4>
<p>首先创建多个路由表，因为每一个路由表只能默认走一个接口，所以刚刚创建了多少虚拟网络接口，这里就要增加几个路由表，我按照2个接口来演示</p>
<p>编辑 <code>/etc/iproute2/rt_tables</code> 文件，在文件末尾增加两个路由表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 新增的路由表</span>
</span></span><span class="line"><span class="cl"><span class="m">100</span>      vmac0
</span></span><span class="line"><span class="cl"><span class="m">101</span>      vmac1
</span></span></code></pre></td></tr></table>
</div>
</div><p>保证新路由表中没有条目，先清空一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip route flush table vmac0
</span></span><span class="line"><span class="cl">ip route flush table vmac1
</span></span></code></pre></td></tr></table>
</div>
</div><p>分别为两个路由表增加默认路由项，分别走不同的网络接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip route add 0/0 dev vmac0 table vmac0
</span></span><span class="line"><span class="cl">ip route add 0/0 dev vmac1 table vmac1
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置iptables">配置iptables</h4>
<p>分别创建多个新的链</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -N VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC0 -j MARK --set-mark 0x100
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC0 -j CONNMARK --save-mark
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">iptables -t mangle -N VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC1 -j MARK --set-mark 0x101
</span></span><span class="line"><span class="cl">iptables -t mangle -A VMAC1 -j CONNMARK --save-mark
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置打标记的规则，每两个包（只看新建的连接）中第一个交给<code>VMAC0</code>处理，第二个交给<code>VMAC1</code>处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">0</span> -j VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">1</span> -j VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A OUTPUT -o vmac+ -m state --state ESTABLISHED,RELATED -j CONNMARK --restore-mark
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置策略路由">配置策略路由</h4>
<p>下面需要配置策略路由，根据我们设置的策略，流量分别由多个路由表进行路由，所以就可以走多个网络接口了</p>
<p>我们让防火墙标记为<code>0x100</code>的用<code>vmac0</code>路由表，标记为<code>0x101</code>流量的用<code>vmac1</code>路由表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip rule add fwmark 0x100 table vmac0
</span></span><span class="line"><span class="cl">ip rule add fwmark 0x101 table vmac1
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时会出现一个问题，就是从外部发起的连接在进来后并没有打上防火墙标记，所以返回的包只能走默认的路由表。假如我们的默认路由表的默认路由是走<code>vmac0</code>，那来自<code>vmac1</code>的请求的响应包也会走<code>vmac0</code>出去，因为不属于同一个连接，这个包就会被丢掉。</p>
<p>我们的解决方法是再增加两条规则，来自哪个网卡的包的响应就从该网卡出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip rule add from &lt;vmac0-ip&gt; table vmac0
</span></span><span class="line"><span class="cl">ip rule add from &lt;vmac1-ip&gt; table vmac1
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="用作路由器">用作路由器</h4>
<p>如果这台Linux需要用作网关，需要配置PREROUTING链，这里假设内网网段为 <code>192.168/16</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">0</span> -j VMAC0
</span></span><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state NEW -m statistic --mode nth --every <span class="m">2</span> --packet <span class="m">1</span> -j VMAC1
</span></span><span class="line"><span class="cl">iptables -t mangle -A PREROUTING -s 192.168/16 ! -d 192.168/16 -m state --state ESTABLISHED,RELATED -j CONNMARK --restore-mark
</span></span></code></pre></td></tr></table>
</div>
</div><p>同时需要对内网流量进行SNAT</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -o vmac+ -j MASQUERADE
</span></span></code></pre></td></tr></table>
</div>
</div><p>经过上面的步骤，已经能够利用多个网络接口了。不过我们本质上是通过连接分流的，同一个连接的所有包会走同一个接口出去，所以如果你的程序是单线程网络，就看不到加速效果。可以通过speedtest多线程来进行测试，可以看到明显的网速叠加。</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>我刚刚的演示重启后虚拟网卡会丢失，因为自动分配的mac地址，重新运行命令会导致mac和ip变动，需要重新认证</p>
<p>可以使用指定mac地址的方法创建，也有持久化虚拟网卡的方法，可以一劳永逸</p>
<p>后面会将更加成熟的方法，这里手工配置不是重点，需要的自行学习研究吧！</p>
</div>
        </div>
    </div>
<h2 id="使用openwrtmwan3">使用OpenWrt+mwan3</h2>
<p>我比较推荐在宿舍里搞个软路由，普通的路由刷OpenWrt或者弄个树莓派刷OpenWrt都行，可以考虑买个二手矿渣 <code>newifi 3</code> 或者 <code>R2S</code></p>
<p>因为在OpenWrt里面有现成的插件，可以非常方便的创建多个虚拟网络接口，并能够利用图形界面配置更加强大的分流策略。</p>
<p>主要涉及到两个插件：kmod-macvlan和mwan3</p>
<h3 id="添加设备获取ip">添加设备，获取IP</h3>
<p>首先在正确配置好网络的基础上，先创建网络设备，类型是macvlan，在学习了Linux下手工操作的基础上，这里的配置项都好理解</p>
<p>


    
        
        
    
</p>
<p>要几拨就添加几个设备，注意最好手工指定一下mac，基础设备选正常上网的wan口物理设备</p>
<p>


    
        
        
    
</p>
<p>然后添加相同数量的接口，协议选DHCP，接口设备选刚刚创建的，一一对应</p>
<p>


    
        
        
    
</p>
<p>接口添加好后，进行连接就会自动获取IP了，然后与上面手工方式一样，把所有IP都认证一下</p>
<h3 id="配置mwan3分流">配置mwan3分流</h3>
<p>在mwan的管理界面，首先添加接口，与网络里面刚刚配置的接口一一对应</p>
<p>


    
        
        
    
</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">这里涉及到接口可用性的检测，需要仔细设置一下，后面的分流需要依赖这个可用性检测，总不能把流量分给不可用的接口吧</div>
        </div>
    </div>
<p>然后添加成员，与刚刚添加的接口一一对应，这里添加的可以在后面策略那里选择</p>
<p>


    
        
        
    
</p>
<p>添加策略，图中第一条是负载均衡策略，刚刚添加的成员全都选中，意思就是说同时使用这所有的网络</p>
<p>后面几条策略分别是用来测试想用网络设备的</p>
<p>


    
        
        
    
</p>
<p>最后添加分流规则，最简单的如图所示，目的地址不限，端口不限，协议不限，都走负载均衡策略，也就是从所有网口出</p>
<p>


    
        
        
    
</p>
<p>


    
        
        
    
</p>
<p>在状态面板可以看到，多拨成功</p>
<p>


    
        
        
    
</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon icon-lightbulb"></i>技巧<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">mwan3代码在：<a href="https://github.com/openwrt/packages/tree/master/net/mwan3" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/openwrt/packages/tree/master/net/mwan3</a></div>
        </div>
    </div>
<h2 id="爱快分流很强大">爱快，分流很强大</h2>
<p>正好我在的实验室里有老旧的台式机，又有多个网卡，我就安装了以分流著称的iKuai系统</p>
<p>爱快路由系统对性能要求很高，64位甚至要求4G运存才能安装，不太建议宿舍用，不过实话实话这个是真的爽</p>
<p>首先在网路设置中，选择正确的物理网卡，接入方式选<code>基于物理网卡的混合模式</code>，在DHCP模式下添加多个虚拟网络接口，mac地址自己指定</p>
<p>


    
        
        
    
</p>
<p>关开网络接口，让其DHCP获取到IP地址，然后按照之前说的方法进行网络认证</p>
<p>然后进入分流设置，配置多线负载</p>
<p>


    
        
        
    
</p>
<p>添加的时候有多种负载模式可供选择，可以添加多个负载规则。注意要把前面创建的网络接口全部开启</p>
<p>


    
        
        
    
</p>
<p>对！就是这么简单，iKuai就是牛，已经把网速叠加成功了</p>
<h2 id="新发现">新发现</h2>
<p>在与同学的交流中，发现校园网还可以用任意手机号验证码登录，登陆后的权限是访客，不过与学生权限一样，如此看来可以利用多个手机号突破5台设备的限制了</p>
<p>注意，登录成功后一定要修改密码，否则第二次登录的时候会提示创建新账号失败，是后台的BUG，日</p>
<p>最后，向大家推荐一个讲iptables的视频，可以在Youtube或者Bilibili搜索<code>坏人的iptables小讲堂</code>，讲的真的很不错</p>
]]></description></item><item><title>使用GlobalSSH服务加速境外服务器ssh访问</title><link>https://zu1k.com/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</link><pubDate>Sun, 12 Apr 2020 16:37:56 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</guid><description><![CDATA[<blockquote>
<h3 id="ucloud已经对加速ip进行限制本文中的方法即时失效">UCloud已经对加速IP进行限制，本文中的方法即时失效</h3>
<p>通知内容如下：<br>
尊敬的UCloud用户，您好！<br>
GlobalSSH产品即日起将暂时限制服务器IP地址范围，<br>
仅允许添加UCloud平台上的IP地址，已创建的资源仍然可继续使用。 <br>
GlobalSSH版本与功能支持将持续更新，敬请关注。</p>
</blockquote>
<p>由于众所周知的原因，很多国外的服务器在国内的访问效果很差，特别是国内比较热门的廉价服务器例如 Vultr 就经常被墙直接无法访问</p>
<p>通常情况下我会使用ssr等代理服务进行中转，在我经常使用的 MobaXterm 中设置起来也非常方便</p>
<p>


    
        
        
    
</p>
<p>但是这种方法有两大劣势：</p>
<ol>
<li>如果科学上网服务器不稳定经常断流就会导致ssh连接断开</li>
<li>部分客户端不支持设置http或者socks代理</li>
</ol>
<h2 id="globalssh">GlobalSSH</h2>
<p>今天发现了一个免费的加速服务，非常方便，推荐给需要的人</p>
<p>这就是 UCloud 免费提供的 GlobalSSH 加速服务</p>
<p>官网链接： <a href="https://console.ucloud.cn/upathx/globalssh" target="_blank" rel="noopener noreffer" class="post-link">https://console.ucloud.cn/upathx/globalssh</a></p>
<p>官方文档： <a href="https://docs.ucloud.cn/pathx/globalssh" target="_blank" rel="noopener noreffer" class="post-link">https://docs.ucloud.cn/pathx/globalssh</a></p>
<p>这项服务目前是免费的，<del>也不需要进行实名认证</del> 现在需要实名认证才能用了，可以说是非常良心了，经过我的试用，访问速度和稳定性非常不错</p>
<p>支持ssh和rdp远程桌面，猜测有一些其他的服务可以加速，因为是针对端口加速的，但是如果滥用的话可能被封禁</p>
<p>在创建的时候只需要输入需要加速的国外服务器的ip和服务端口号，选择一个离服务器近的接入点</p>
<p>


    
        
        
    
</p>
<p>创建之后会提供一个域名，可以将自己的域名CNAME解析到提供的域名上方便记忆，UCLOUD可以准确识别到是访问哪一台服务器</p>
<p>在我们使用的客户端上只需要用提供的加速域名和原服务端口号就可以了</p>
<h2 id="注意事项">注意事项</h2>
<ol>
<li>自产品实例创建之日起，7日内单个实例累计出向流量小于2MB，加速功能将被停用，所以一开始先多用点吧</li>
<li>每个源IP只能加速一个端口</li>
<li>加速流量上限官方未注明，滥用的话会被封</li>
</ol>
<h2 id="妙用">妙用</h2>
<p>众所周知，github在国内的访问速度很慢，有时候clone一个库不得不忍受十几k几十k每秒的速度</p>
<p>而git是可以用ssh协议的，所以我们只需要从 <a href="https://api.github.com/meta" target="_blank" rel="noopener noreffer" class="post-link">https://api.github.com/meta</a> 找到github使用的ip，通过GlobalSSH加速22端口，然后将自己的域名解析到加速的ip，最后使用自己的域名clone就行了</p>
<p>经过我的尝试效果还不错，可以跑到10Mbps</p>
<p>我用的域名为 <code>githubssh.xyz</code> ，大家可以拿去用，使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">原命令
</span></span><span class="line"><span class="cl">git clone git@github.com:moby/moby.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">替换后
</span></span><span class="line"><span class="cl">git clone git@githubssh.xyz:moby/moby.git
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了能够自动更新ip，我写了一个程序，每天会检查github新的ip，创建新的globalssh，然后自动解析到域名githubssh.xyz上，由cloudflare进行DNS层面的负载均衡</p>
<p>开源地址为： <a href="https://github.com/zu1k/globalssh4github" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/zu1k/globalssh4github</a></p>
<p>同时为了方便，改了一个插件： <a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo" target="_blank" rel="noopener noreffer" class="post-link">https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo</a></p>
]]></description></item><item><title>给 Git 设置代理</title><link>https://zu1k.com/posts/coding/set-proxy-for-git/</link><pubDate>Fri, 27 Mar 2020 15:45:02 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/coding/set-proxy-for-git/</guid><description><![CDATA[<p>近期，GitHub 的直连速度一直不理想，甚至被墙或者MITM，最好的解决办法就是挂代理</p>
<p>Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议</p>
<p>而我们平时使用github一般使用两种协议，一种是http协议，另一种是ssh协议，针对这两种协议有两种不同的代理设置办法</p>
<h2 id="http协议">http协议</h2>
<p>通常使用的链接形如：<code>https://github.com/git/git.git</code></p>
<p>针对这种协议，代理设置比较简单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># http或https代理</span>
</span></span><span class="line"><span class="cl">git config --global http.proxy http://127.0.0.1:7890
</span></span><span class="line"><span class="cl">git config --global https.proxy http://127.0.0.1:7890
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 取消代理</span>
</span></span><span class="line"><span class="cl">git config --global --unset http.proxy
</span></span><span class="line"><span class="cl">git config --global --unset https.proxy
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ssh协议">ssh协议</h2>
<p>通常使用的链接形如：<code>git@github.com:git/git.git</code> 或者 <code>ssh://[&lt;username&gt;@]&lt;server&gt;[:&lt;port&gt;]/path/repo.git</code></p>
<p>对于使用ssh协议的库，上面的代理设置办法就失效了，需要给ssh设置socks代理</p>
<p>在 <code>~/.ssh/config</code> 文件中添加下面内容， 如果没有这个文件就新建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host github.com
</span></span><span class="line"><span class="cl">ProxyCommand nc -X <span class="m">5</span> -x 127.0.0.1:1080 %h %p
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里使用的是nc命令，Linux需要安装netcat(一般自带了)，windows需要单独下载</p>
<p>windows如果安装了<code>mingw</code>也可以使用<code>connect</code>命令来替代<code>nc</code>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host github.com
</span></span><span class="line"><span class="cl">ProxyCommand connect -S 127.0.0.1:1080 %h %p
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>使用iptables将ubuntu配置为路由器</title><link>https://zu1k.com/posts/linux/ubuntu-iptables-nat/</link><pubDate>Wed, 18 Mar 2020 13:15:40 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/linux/ubuntu-iptables-nat/</guid><description><![CDATA[<h2 id="实验环境">实验环境</h2>
<blockquote>
<p>使用 vmware 分别创建win7和ubuntu两个虚拟机</p>
</blockquote>
<h3 id="ubuntu-1804">ubuntu 18.04</h3>
<p>充当网关路由器</p>
<p>网卡1(WAN口)：桥接公网</p>
<p>网卡2(LAN口)：vmnet15</p>
<p>


    
        
        
    
</p>
<h3 id="win7">win7</h3>
<p>充当内网客户机</p>
<p>网卡：vmnet15</p>
<blockquote>
<p>vmnet15不使用vmware的配置，使用一个空的vmnet</p>
</blockquote>
<p>


    
        
        
    
</p>
<h2 id="ubuntu-配置">ubuntu 配置</h2>
<h3 id="开启ipv4-forward">开启ipv4 forward</h3>
<p>修改 <code>/etc/sysctl.conf</code> 开启ipv4的forward功能，将下面的注释打开，如果没有手动添加。</p>
<p>


    
        
        
    
</p>
<p><code>sysctl -p</code> 生效</p>
<h3 id="配置网卡信息">配置网卡信息</h3>
<p><code>ip addr</code> 查看所有网卡的名称和信息</p>
<p>ubuntu18.04使用netplan管理网络，修改其配置文件</p>
<p><code>sudo nano /etc/netplan/50-cloud-init.yaml</code></p>
<p>


    
        
        
    
</p>
<p>使用 <code>netplan try</code> 检查配置是否正确，如果正确自动应用生效</p>
<h3 id="配置iptables规则">配置iptables规则</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">//清空已有规则防止干扰
</span></span><span class="line"><span class="cl">iptables -F
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//进、出、转发默认允许
</span></span><span class="line"><span class="cl">iptables -P INPUT ACCEPT
</span></span><span class="line"><span class="cl">iptables -P FORWARD ACCEPT
</span></span><span class="line"><span class="cl">iptables -P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//将从子网网段来的连接nat到eno33网卡<span class="o">(</span>互联网<span class="o">)</span>，ip改为外网ip
</span></span><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o eno33 -j SNAT --to-source 192.168.254.129
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//添加伪装
</span></span><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="win7-设置">win7 设置</h2>
<p>修改网卡配置如图</p>
<p>


    
        
        
    
</p>
<p>win7即可通过ubuntu这个网关上网</p>
]]></description></item><item><title>给docker里的每一个容器一个独立的ipv6地址</title><link>https://zu1k.com/posts/coding/set-ipv6-for-every-docker-container/</link><pubDate>Sat, 31 Aug 2019 14:39:03 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/coding/set-ipv6-for-every-docker-container/</guid><description><![CDATA[<p>ipv6不断普及，ipv6地址多的数不胜数，机房给单台机器分配的ipv6段达到了可怕的64位长度的子网主机号。</p>
<p>那我不禁在想，能不能给docker下的每个容器独立的ipv6地址，这样就不需要映射端口号了。</p>
<p>所以就有了以下实践：</p>
<p>首先，给docker engine开启ipv6支持, 参考： <a href="https://docs.docker.com/config/daemon/ipv6/" target="_blank" rel="noopener noreffer" class="post-link">https://docs.docker.com/config/daemon/ipv6/</a></p>
<p>配置/etc/docker/daemon.json文件如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ipv6&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;fixed-cidr-v6&#34;</span><span class="p">:</span> <span class="s2">&#34;2001🔢5001🔢:/64&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行 <code>systemctl reload docker</code> 重载Docker Engine的配置文件</p>
<p>这样docker默认的bridge网络就会给容器分配随机的ipv6地址了。</p>
<p>但是我们通常需要固定的ipv6地址，所以需要添加自定义网桥网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d bridge --ipv6 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet <span class="s2">&#34;2001🔢5001🔢6666::/80&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gateway<span class="o">=</span><span class="s2">&#34;2001🔢5001🔢6666::1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet<span class="o">=</span>172.28.0.0/16 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gateway<span class="o">=</span>172.28.0.1 ipv6
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后启动docker容器时候指定ipv6网桥和ipv6地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -itd -P --ip<span class="o">=</span>172.28.0.101 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip6<span class="o">=</span><span class="s2">&#34;2001🔢5001🔢6666::101&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>ipv6 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name<span class="o">=</span>ipv6test <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ubuntu:18.04 /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时容器已经有独立的ipv6地址了，我们发现向外访问可以访问，但是外界访问不到docker后面隐藏的container
这是因为ipv6使用NDP协议，我们需要在容器的宿主机上设置 ndp代理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sysctl net.ipv6.conf.ens3.proxy_ndp<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ens3是我的宿主机外网网卡，这里需要替换成你自己的</p>
</blockquote>
<p>这里每一个docker分配的ipv6地址都需要添加这样一条规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip -6 neigh add proxy 2001🔢5001🔢6666::101 dev ens3
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>屏蔽一个国家所有IP</title><link>https://zu1k.com/posts/linux/block-all-ips-in-a-country/</link><pubDate>Mon, 03 Dec 2018 17:55:28 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/linux/block-all-ips-in-a-country/</guid><description><![CDATA[<p>搭建了一个MTProxy，分享出去，最后发现网速跑满，连接ip数高达600多，并且还在不断增加。
查看ip来源后发现九成以上是伊朗人，后来知道原来tg在他们国家被封了，所以才导致如此。</p>
<p>所以想办法屏蔽这些ip，准确的说是一整个国家的ip,或者说是一堆ip</p>
<h2 id="使用iptables添加规则">使用iptables添加规则</h2>
<p>方法如下：
1.下载一个国家的ip段，网址：<a href="http://www.ipdeny.com/ipblocks/" target="_blank" rel="noopener noreffer" class="post-link">http://www.ipdeny.com/ipblocks/</a></p>
<p><code>wget http://www.ipdeny.com/ipblocks/data/countries/ir.zone</code></p>
<p>2.使用脚本批量添加iptables规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Block traffic from a specific country</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">COUNTRY</span><span class="o">=</span><span class="s2">&#34;ir&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">IPTABLES</span><span class="o">=</span>/sbin/iptables
</span></span><span class="line"><span class="cl"><span class="nv">EGREP</span><span class="o">=</span>/bin/egrep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="k">$(</span>id -u<span class="k">)</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;you must be root&#34;</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">resetrules<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -t nat -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -t mangle -F
</span></span><span class="line"><span class="cl"><span class="nv">$IPTABLES</span> -X
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">resetrules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> c in <span class="nv">$COUNTRY</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nv">country_file</span><span class="o">=</span><span class="nv">$c</span>.zone
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$country_file</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> ip in <span class="nv">$IPS</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span>
</span></span><span class="line"><span class="cl">            <span class="nb">echo</span> <span class="s2">&#34;blocking </span><span class="nv">$ip</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$IPTABLES</span> -A INPUT -s <span class="nv">$ip</span> -j DROP
</span></span><span class="line"><span class="cl">        <span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">iptables-save
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用ipset添加ip集合">使用ipset添加ip集合</h2>
<p>发现用iptables直接添加ip实在低效，可以用其扩展ipset直接添加一个集合。</p>
<p>什么是IP集?</p>
<p>这时候就是IP集登场了。IP集是一个内核特性，它允许多个（独立）IP地址、MAC地址或者甚至是端口号被编码和有效地存储在位图/哈希内核数据结构中。一旦IP集创建之后，你可以创建一条iptables规则来匹配这个集合。</p>
<p>你马上就会看见IP集合的好处了，它可以让你用一条iptable规则匹配多个ip地址！你可以用多个IP地址和端口号的方式来构造IP集，并且可以动态地更新规则而没有性能影响。
在Linux中安装IPset工具</p>
<p>为了创建和管理IP集，你需要使用称为ipset的用户空间工具。</p>
<p>要在Debian、Ubuntu或者Linux Mint上安装：</p>
<p><code>$ sudo apt-get install ipset</code></p>
<p>Fedora或者CentOS/RHEL 7上安装：</p>
<p><code>$ sudo yum install ipset</code></p>
<p>使用IPset命令禁止IP</p>
<p>让我通过简单的示例告诉你该如何使用ipset命令。</p>
<p>首先，让我们创建一条新的IP集，名为banthis（名字任意）：</p>
<p><code>$ sudo ipset create banthis hash:net</code></p>
<p>第二个参数(hash:net)是必须的，代表的是集合的类型。IP集有多个类型。hash:net类型的IP集使用哈希来存储多个CIDR块。如果你想要在一个集合中存储单独的IP地址，你可以使用hash:ip类型。</p>
<p>一旦创建了一个IP集之后，你可以用下面的命令来检查：</p>
<p><code>$ sudo ipset list</code></p>
<p>这显示了一个可用的IP集合列表，并有包含了集合成员的详细信息。默认上，每个IP集合可以包含65536个元素（这里是CIDR块）。你可以通过追加&quot;maxelem N&quot;选项来增加限制。</p>
<p><code>$ sudo ipset create banthis hash:net maxelem 1000000</code></p>
<p>现在让我们来增加IP块到这个集合中：</p>
<p><code>$ sudo ipset add banthis 1.1.1.1/32</code>
<code>$ sudo ipset add banthis 1.1.2.0/24</code>
<code>$ sudo ipset add banthis 1.1.3.0/24</code>
<code>$ sudo ipset add banthis 1.1.4.10/24</code></p>
<p>这一步可以使用shell脚本自动添加</p>
<p>你会看到集合成员已经改变了。</p>
<p><code>$ sudo ipset list</code></p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&quot;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&rdquo;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在让我们创建一条让之前那些IP块不能通过80端口访问web服务的iptable规则。可以通过下面的命令：</p>
<p><code>$ sudo iptables -I INPUT -m set --match-set banthis src -p tcp --destination-port 80 -j DROP</code></p>
<p>如果你愿意，你可以保存特定的IP集到一个文件中，以后可以从文件中还原：</p>
<p><code>$ sudo ipset save banthis -f banthis.txt</code>
<code>$ sudo ipset destroy banthis</code>
<code>$ sudo ipset restore -f banthis.txt</code></p>
<h2 id="自用脚本">自用脚本</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">EGREP</span><span class="o">=</span>/bin/egrep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">con_file</span><span class="o">=</span><span class="nv">$1</span>.zone
</span></span><span class="line"><span class="cl"><span class="nv">ipset</span><span class="o">=</span><span class="nv">$1</span>ip
</span></span><span class="line"><span class="cl">wget http://www.ipdeny.com/ipblocks/data/countries/<span class="nv">$con_file</span>
</span></span><span class="line"><span class="cl">ipset creat <span class="nv">$ipset</span> hash:net    
</span></span><span class="line"><span class="cl"><span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$con_file</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> ip in <span class="nv">$IPS</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    ipset add <span class="nv">$ipset</span> <span class="nv">$ip</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">rm <span class="nv">$con_file</span>
</span></span><span class="line"><span class="cl">iptables -I INPUT -m <span class="nb">set</span> --match-set <span class="nv">$ipset</span> src -p tcp --destination-port <span class="m">6666</span> -j DROP
</span></span><span class="line"><span class="cl">iptables-save
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考文章">参考文章：</h2>
<p><a href="https://www.jb51.net/Linuxjishu/339309.html" target="_blank" rel="noopener noreffer" class="post-link">在Linux下实现批量屏蔽IP地址的方法</a></p>
]]></description></item></channel></rss>