<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>思考 - 标签 - zu1k</title><link>https://zu1k.com/tags/thinking/</link><description>人需要思考，早晨起来我经常坐在床上冥想，思考人生、思考社会、思考未来、思考无穷的宇宙。这个栏目将记录我的一些世俗的思考成果</description><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://zu1k.com/tags/thinking/" rel="self" type="application/rss+xml"/><item><title>DeepL Api 设计中的欺骗战术</title><link>https://zu1k.com/posts/thinking/deception-tactics-in-deepl-api-design/</link><pubDate>Sat, 02 Apr 2022 12:28:18 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/deception-tactics-in-deepl-api-design/</guid><description><![CDATA[
        <p>这篇博文本应该在去年完成 DeepL 客户端逆向的时候发布，但考虑到相关细节一旦公开，恐怕会被广泛采用而被 DeepL 官方封杀，因此迟迟未开始。前段时间我发布了 <a href=https://hub.docker.com/r/zu1k/deepl target=_blank rel="noopener noreffer" class=post-link>DeepL Free Api 的 Docker 镜像</a>，也在 <a href=https://github.com/zu1k/deepl-api-rs target=_blank rel="noopener noreffer" class=post-link>GitHub 上公开了相关二进制程序</a>，就下载量来看已经有不少人在使用了，相信 DeepL 不久就会有动作，因此我认为现在已经可以公开相关细节。</p><p>我逆向的是 DeepL 的 Windows 客户端，因为是 <code>C#</code> 开发依附于 <code>.net</code>，也未进行任何混淆和加壳，可以轻松逆出源码。通过前段时间与一些其他研究者交流，我认为已经有不少感兴趣的同学也进行了逆向，也许是一种默契，都害怕 DeepL 在发觉后进行修改，所以大家也都没有对外公开，目前网络中搜不到任何相关的内容。本文的目的是给相关小伙伴一点思路，不过希望大家还是不要直接公开代码，以继续欺骗 DeepL，让其相信还没有人发现他们的把戏。</p><p>在我实现 DeepL Free Api 的过程中，我发现 DeepL 并没有像之前见到的一些接口设计那样，通过签名等手段来避免接口滥用，相反，他们使用了一些欺骗战术来混淆视听，从而尝试让抓包分析者放弃，本文将围绕此进行讨论。</p><h2 id=过程><a href=#过程 class="header-mark headerLink">过程</a></h2><p>进入研究生阶段，为了方便阅读论文，为自己开发了划词翻译工具，在众多翻译引擎中 DeepL 的效果尤为出色。DeepL 官方的 Api 需要绑定信用卡进行认证，但其并未在中国大陆经营业务，所以并不支持国内的信用卡。我也尝试过从淘宝购买别人用国外信用卡认证过的帐号，价格贵不说，在没有滥用的情况下，DeepL 在两个月内封禁了我的帐号，因此我决定用一些其他手段。</p><p>考虑到 DeepL 有提供免费版本的翻译服务，支持 Web，Windows、Android 和 iOS 都有相应的客户端，我便想使用这些客户端使用的免费接口。不出所料，在广泛使用打包和混淆技术的当下，DeepL 的 Web 端 js 代码也不是人看的东西，但通过简单的抓包，我发现其接口参数非常清晰，根本没有额外的签名、token等认证技术，我觉得自己又行了，几行 Python 代码便完成了接口对接工作。</p><p>但测试下来，我发现当修改翻译内容，有极大概率遇到 429 <code>Too many requests</code>，并且一旦出现 429，后续的所有请求便都是 429 了。</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span><span class=lnt>7
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-json data-lang=json><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;jsonrpc&#34;</span><span class=p>:</span> <span class=s2>&#34;2.0&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;error&#34;</span><span class=p>:{</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;code&#34;</span><span class=p>:</span><span class=mi>1042902</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;message&#34;</span><span class=p>:</span><span class=s2>&#34;Too many requests.&#34;</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>在 GitHub 搜索之后，我发现已经有前人尝试利用过 DeepL 的免费接口了，早在 2018 年他们就已经遇到了这个 429 问题，并且到现在都没有解决。</p><p>我尝试转向客户端的免费接口，苹果设备可以轻松 MITM，于是我便在 iPad 上对 DeepL 客户端进行抓包，让我意想不到的是，客户端的请求竟然比 Web 端的简单不少，接口参数数量仅有必须的几个，非常有利于利用。于是我又觉得自己行了，两三行 Python 代码完成接口对接。</p><p>简单测试，我又傻眼了。伪造的请求明明跟客户端发起的完全相同，但只要一更换翻译的内容，返回马上就变成 429。干！我都开始怀疑自己了。</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span><span class=lnt>11
</span><span class=lnt>12
</span><span class=lnt>13
</span><span class=lnt>14
</span><span class=lnt>15
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-json data-lang=json><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;jsonrpc&#34;</span><span class=p>:</span> <span class=s2>&#34;2.0&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;method&#34;</span><span class=p>:</span> <span class=s2>&#34;LMT_handle_texts&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;params&#34;</span><span class=p>:</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;texts&#34;</span><span class=p>:</span> <span class=p>[{</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;text&#34;</span><span class=p>:</span> <span class=s2>&#34;translate this, my friend&#34;</span>
</span></span><span class=line><span class=cl>        <span class=p>}],</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;lang&#34;</span><span class=p>:</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;target_lang&#34;</span><span class=p>:</span> <span class=s2>&#34;ZH&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>            <span class=nt>&#34;source_lang_user_selected&#34;</span><span class=p>:</span> <span class=s2>&#34;EN&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=p>},</span>
</span></span><span class=line><span class=cl>        <span class=nt>&#34;timestamp&#34;</span><span class=p>:</span> <span class=mi>1648877491942</span>
</span></span><span class=line><span class=cl>    <span class=p>},</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;id&#34;</span><span class=p>:</span> <span class=mi>12345</span><span class=p>,</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>你自己看看，这个接口多么清楚明白，但怎么就伪造不了呢？</p><p>我想了又想，这里面也就 <code>id</code> 比较可疑，因为这个参数我不知道它是怎么生成的，是随机的还是根据某种规则计算出来的，我们无从知道。但从目前结果来看，随机的 <code>id</code> 无法被服务器认可。</p><p>当然，我也考虑过其他的服务端判断滥用的方法，例如某些 http 头、ssl 层面的方法（例如之前 Go 实现中 SSL 协商过程中加密算法的顺序等），我也想办法进行了伪造，可就是不行。疲惫了，不想搞了。</p><p>第二天，突然想起他的 Windows 客户端，稍微一分析惊喜的发现是 <code>C#</code>，还没加壳，果断扔进 <code>dnSpy</code>，发现也没混淆，真是柳暗花明又一村啊。分析之后，也就一切都清楚明白了，原来 DeepL 根本一开始就在想方设法让你觉得你行啊。</p><p>看前面那个接口的参数，我之所以觉得我行，就是因为这个接口它太简单了。接口的参数少，参数含义又非常明确，它并不像某些厂那样用一些不知所以然的缩写，这里的每一个参数，它的名称都在告诉我它的含义、它是干什么的以及它是怎么生成的。</p><p><code>jsonrpc</code> 是版本号，<code>method</code> 是方法，一个固定的字符串。<code>params</code> 里面 <code>texts</code> 是多段待翻译的文本，<code>lang</code> 里面是翻译的语言选项，是枚举类型。<code>timestamp</code> 是 UNIX 风格的时间戳，<code>id</code> 就是序号。大眼一看，这里面只有 <code>id</code> 是最可疑的，这也确实是我最初犯的错误。</p><h2 id=真相><a href=#真相 class="header-mark headerLink">真相</a></h2><p>现在我来告诉你，DeepL 到底是怎么认证的。（下面并不是 DeepL 客户端的代码，是我写的 Rust 利用代码，但逻辑不变）</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-Rust data-lang=Rust><span class=line><span class=cl><span class=k>fn</span> <span class=nf>gen_fake_timestamp</span><span class=p>(</span><span class=n>texts</span>: <span class=kp>&amp;</span><span class=nb>Vec</span><span class=o>&lt;</span><span class=nb>String</span><span class=o>&gt;</span><span class=p>)</span><span class=w> </span>-&gt; <span class=kt>u128</span> <span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=kd>let</span><span class=w> </span><span class=n>ts</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>tool</span>::<span class=n>get_epoch_ms</span><span class=p>();</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=kd>let</span><span class=w> </span><span class=n>i_count</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>texts</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>.</span><span class=n>iter</span><span class=p>()</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>.</span><span class=n>fold</span><span class=p>(</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>                </span><span class=mi>1</span><span class=p>,</span><span class=w> 
</span></span></span><span class=line><span class=cl><span class=w>                </span><span class=o>|</span><span class=n>s</span><span class=p>,</span><span class=w> </span><span class=n>t</span><span class=o>|</span><span class=w> </span><span class=n>s</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=n>t</span><span class=p>.</span><span class=n>text</span><span class=p>.</span><span class=n>matches</span><span class=p>(</span><span class=sc>&#39;i&#39;</span><span class=p>).</span><span class=n>count</span><span class=p>()</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>            </span><span class=p>)</span><span class=w> </span><span class=k>as</span><span class=w> </span><span class=kt>u128</span><span class=p>;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=n>ts</span><span class=w> </span><span class=o>-</span><span class=w> </span><span class=n>ts</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=n>i_count</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=n>i_count</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=p>}</span><span class=w>
</span></span></span></code></pre></td></tr></table></div></div></div><p>哈哈！没想到吧！人家的时间戳不是真的！</p><p>DeepL 先计算了文本中所有 <code>i</code> 的数量，然后对真正的时间戳进行一个小小的运算 <code>ts - ts % i_count + i_count</code>，这个运算差不多仅会改变时间戳的毫秒部分，这个改变如果用人眼来验证根本无法发现，人类看来就是一个普通的时间戳，不会在意毫秒级的差别。</p><p>但是 DeepL 拿到这个修改后的时间戳，既可以与真实时间对比(误差毫秒级)，又可以通过简单的运算（是否是 <code>i_count</code> 的整倍数）判断是否是伪造的请求。真是精妙啊！</p><p>还有更绝的！你接着看：</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span><span class=lnt>7
</span><span class=lnt>8
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-Rust data-lang=Rust><span class=line><span class=cl><span class=kd>let</span><span class=w> </span><span class=n>req</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>req</span><span class=p>.</span><span class=n>replace</span><span class=p>(</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s>:</span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=p>,</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=k>if</span><span class=w> </span><span class=p>(</span><span class=bp>self</span><span class=p>.</span><span class=n>id</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=mi>3</span><span class=p>)</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=mi>13</span><span class=w> </span><span class=o>==</span><span class=w> </span><span class=mi>0</span><span class=w> </span><span class=o>||</span><span class=w> </span><span class=p>(</span><span class=bp>self</span><span class=p>.</span><span class=n>id</span><span class=w> </span><span class=o>+</span><span class=w> </span><span class=mi>5</span><span class=p>)</span><span class=w> </span><span class=o>%</span><span class=w> </span><span class=mi>29</span><span class=w> </span><span class=o>==</span><span class=w> </span><span class=mi>0</span><span class=w> </span><span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>        </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s> : </span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=p>}</span><span class=w> </span><span class=k>else</span><span class=w> </span><span class=p>{</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>        </span><span class=s>&#34;</span><span class=se>\&#34;</span><span class=s>method</span><span class=se>\&#34;</span><span class=s>: </span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=p>},</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=p>);</span><span class=w>
</span></span></span></code></pre></td></tr></table></div></div></div><p>怎么样？我觉得我一开始就被玩弄了，人家的 <code>id</code> 就是纯粹的随机数，只不过后续的请求会在第一次的随机 <code>id</code> 基础上加一，但是这个 <code>id</code> 还决定了文本中一个小小的、微不足道的空格。</p><p>按照正常的思路，为了方便人类阅读和分析，拿到请求的第一时间，我都会先扔编辑器里格式化一下 Json，我怎么会想到，这恰恰会破坏掉人家用来认证的特征，因此无论我如何努力都难以发现。</p><h2 id=总结><a href=#总结 class="header-mark headerLink">总结</a></h2><p>在我以往的经验中，接口防滥用，要不就是用户专属的 token，要不就是对请求进行签名或者加密，这些对抗滥用的方法都是明面上的，就是明白告诉你我有一个签名，怎么签的，你去分析去吧，但是我代码混淆了，你看看你是要头发还是要算法。</p><p>要不就是高级点的，更具技术性的，利用某些客户端特有的实现造成的特征进行认证，我印象中最深刻的就是 <a href=https://www.zackwu.com/posts/2021-03-14-why-i-always-get-503-with-golang/ target=_blank rel="noopener noreffer" class=post-link>Go 的 SSL 协商过程中的算法顺序</a>。这类方法要求更高的技术，当然分析起来也肯定更加困难，并且找到这样一种方法本身也不容易。</p><p>从 DeepL 的方法中，我找到了另外一种思路。利用人心理的弱点，一开始让其感觉非常简单，但是无论如何都无法得到想要的结果，给分析者造成心理上的打击和自我怀疑，让其浅尝辄止自行放弃分析。同时利用人行为上的惯式，使其自行破坏掉某些关键信息，从而给分析造成难以发现的阻碍。</p><p>原来，除了技术以外，还有这样一条道路啊，真是有趣！</p>]]></description></item><item><title>我的表达欲在减少</title><link>https://zu1k.com/posts/thinking/low-desire-of-expression/</link><pubDate>Mon, 21 Mar 2022 12:04:46 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/low-desire-of-expression/</guid><description><![CDATA[
        <blockquote><p>其实一开始我是想写为什么博客更新越来越慢，但是随着思考的深入，我发现不仅是博客，我在其他地方也越來越封闭，不再表达自己。</p></blockquote><p>翻看近几年我发过的朋友圈，19年1条，20年2条，21年发了3条，而今年仅有一条新年祝福。发朋友圈和说说频率的锐减，我在很早之前就发现了，博客更新频率也在减少，与人倾诉的频率几乎归零。</p><p>不知道为什么，随着知识的增加、人生经验的积累，我的表达欲却在慢慢的下降，而现在几乎已经到达一个极低的水平。看似与人交流很多，却未讨论过自己真正关心的事情；经常麻烦别人，却在遇到真正的难题时自己闷头解决；没有什么伤心事，但总觉得自己忧国忧民心怀天下；看了很多思考了很多，却不再表达而是通过阅读寻求认同感；逐渐封闭掉自己的熟人社交，转向匿名化平台发表。</p><p>我觉得我变了，我不知道这是一种成长还是一种心理疾病，我思考了很多原因，也许是找了一些借口，我决定将它们写下来。</p><blockquote><p>现在我打开手机的笔记软件，这些想法是我昨晚睡前思考的东西，怕第二天忘记所以及时的记录了下来。在我面前的一连串的“我怕”，但仔细看下来却又觉得自己是多么的幼稚，这些东西有啥好“怕”的，我是在在乎什么，为何不能坦然一点。</p></blockquote><p><strong>我怕文章不够条理</strong></p><p>也许你已经发现，我的文章大多都明确的划分段落写上标题，我在特意的理清文章的内容，便于读者阅读。我发现这是一种额外的负担，我是真的想写流水帐，想到什么就写什么，又不是在写书，读者啥的你们会自己去理清楚的。我真想这么做，但又真的不敢，这是一种怎样的束缚，我也说不清楚，就是不敢放开自己。</p><p><strong>我怕内容浅显、质量不高</strong></p><p>实际上这有点自欺欺人，回过头看看自己已经发布过的内容，大部分都是内容浅显且质量不高吧。即使这样，我在发布和表达之前，都会仔细的审查，查找很多资料，尽可能使内容更加丰富和全面。同时，我又觉得这是一种枷锁，是一种表面上的全面，实际上难以深入下去，我有读一些大佬写的内容，他们往往只针对某一个特定的小问题，进行非常深入深刻的思考和讨论，通常可以启发读者，使人醍醐灌顶、理解通透并举一反三。</p><p>比如要说eBPF这个技术，我现在的稿子是，先对比Linux内核模块，然后从BPF的起源、历史，技术原理，应用范围，到已有的开源应用和其在安全领域的应用，我发现我几乎就是在抄袭eBPF的官方文档，缺乏自己的思考和深入的探究。eBPF的应用范围很广，仅在网络流量的分析、处理领域就有很多的内容可写，而我若总想着全面和丰富，就势必难以面面深入，使文章看起来像是在洗稿。这篇关于eBPF的“全面”的文章可能不会发布了，不过我想可能会拿来用作内部分享给不了解的人，使其有个大概的认识。我会单独重新写一篇，专注我所关心的与安全相关的应用。</p><p><strong>我怕内容很快过时</strong></p><p>我曾经阅读过不少内容，在经过区区几年就完全过时，我害怕自己写的内容也有这样的情况，所以我想尽可能的写原理性的东西，但又感觉自己肚子里没有什么墨水。这是一种非常纠结的心情，明明自己有不少实践经验，但这些经验往往依附于特定条件和环境，分享出去会帮助到人但也仅仅在那个时间段会有用，而要讲原理却难以深入下去，总感觉那些东西的原理又很浅显。</p><p>我想写一些教程类的东西，但是又害怕写这类东西，因为在我的评判标准里，教程是没有技术含量的，在我的认知里，看这种第三方的教程不如直接看文档，其中一个很重要的原因就是时效性，不想让别人搜到我的文章，看完后一大骂一句“干，都什么年代了，还用这个方法”。</p><p><strong>我怕暴露自己的无知</strong></p><p>我想表现的像一个长者，但是我的知识和经历无法支撑我做到。认识到自己的无知，已经是很大的进步。我想到了罗翔老师曾经的一个视频，也记得苏格拉底说过的话。我要正视自己的无知，认识到人本身的局限性，并发挥自己的主观能动性，努力提升自我获得进步。</p><p><strong>我怕不被理解</strong></p><p>除了上面的原因之外，还有一些其他的因素，其中最重要的一点是，我觉得自己的很多观点发布之后不会被理解，很多时候我感觉自己对问题的关注点跟身边其他人不太一样，时间久了后就不再想表达。其实“不会被理解”这只是我自己的想法，我并没有通过大量实践来证明这一点，这是不是一种自负的心理？</p><p>我在知乎上看到一个回答，“我觉得我们不断表达，不断分享，是一种筛选，筛选相似的灵魂。如果不愿表达与分享了，只有两种可能：我不抱有能够找到这样的人的希望了，或者我已经找到了”。我不认为自己已经找到，但也并不是已经放弃了希望，但总觉得很怪。</p><p><strong>我怕惹人讨厌</strong></p><p>不愿意表达自己的内心，也许是怕惹人讨厌，或者说，怕因为观点(三观)不合，而断绝交往，感觉像是一种敏感的心理。但是我确实会在意别人的看法，表露内心特别是深层次的感情对我来说有不小的困难，或者说心理障碍，我宁愿隐藏起感情。但我会用实际行动去支持我内心的想法。</p><p><strong>单纯没有欲望</strong></p><p>逐渐远离分享，就好比那天傍晚，一出科研楼大门，便看到那夕阳特殊的颜色和周围炸裂开的云，我不知道该如何描述，云就好像八卦盘一样，一层一层的围绕着夕阳，而每一片又是单独的，夕阳在最中间发出特殊的光辉，好为震撼。我心想，好壮观，好漂亮啊。停下来看了好几秒，却毫无拍下来分享给朋友的意愿。身边有很多人在拍照，我没有这个想法，但我印象中在我初中阶段我是很喜欢拍各种各样的事物的。我不知道这种心理上的变化因何而来，也不知道是好事还是坏事。</p><p><strong>人格</strong></p><p>下午上课无聊，测试了一下性格，结果显示 <a href=https://www.16personalities.com/intp-personality target=_blank rel="noopener noreffer" class=post-link>[&ldquo;逻辑学家"人格]</a>，其中的描述我觉得与我实际情况颇为相似，里面的一些情况虽然我不愿意承认，但是的确存在在我的身上。</p>]]></description></item><item><title>你应该弃坑吗？</title><link>https://zu1k.com/posts/thinking/continue-or-give-up/</link><pubDate>Sat, 08 Jan 2022 23:10:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/continue-or-give-up/</guid><description><![CDATA[
        <p>当你在做某一件事，貌似已经陷入其中好多时日，某一天猛然反应过来，好像这件事并没有想像那么重要，你应该弃坑吗？</p><p>我将以自身经历来向你讲述这一点，我已经经历过这样的抉择好多次了。最初还是非常难以割舍，毕竟已经投入了如此多的精力和时间，就此别过总显得虎头蛇尾。但后来我也算是想通了，人的精力总归是有限，应该尽可能的投入到真正想做的事情中，越能够及早的意识到这一点，在这样的抉择面前越能够坦然做出决定。</p><p>我也是近几年才意识到这一点，如果没有记错的话，第一次遇到这样的抉择是在三年前。</p><p>起初，在某一天我的脑海中突然有了一个想法。人一旦有了想法便总想要去实现一下，于是我便开始着手做这件事，顺便开源出去看看能不能给别人也提供一点便利，说不定还能拉一波人气。事情最初的发展确实符合我的预期，我便投入更多时间，同时对外做了一些宣传工作。</p><p>随着关注的人越来越多，我的心态发生了一些变化，我也不知道到这种心态应该如何表达，也许是对项目、对使用者的责任心，夹杂着一丁点虚荣心。项目的使用者越来越多，他们给出了不少反馈，提了一些问题、要求和请求。作为项目维护者，我常常被这些问题和要求折磨，因为责任感的原因，我的邮件通知就像锁魂咒一样，哪怕是在睡觉，一听到那声通知音，我便能立即醒过来，点亮手机查看反馈。如果我觉得能够在短时间内解决这个问题，我甚至能够在大半夜爬起来打开电脑处理这个问题。白天的绝大多数时间我都在做这个项目的开发，甚至拿不出时间出去玩，有时候因为写到兴头，午饭时间都能被我拖到下午一两点。虽然累，但看到问题被一个个解决，项目不断完善，我觉得自己甚至能够想象到使用者满意的眼神，那一段时间确实乐此不疲。</p><p>后来某一天，我坐在床上发呆的时候，回想自己这一段时间的经历，发现自己貌似除了这个项目，没有完成其余的任何一件其他的事情。这很可怕。我突然意识到，如果这个东西在未来的某一天突然没有了价值，甚至说它的价值一直以来都是被我高估了，那我在这么长的一个时间内，做了个什么？我是不是，或者说也许一直是在做一件无意义的事情，这些时间都被我浪费了，可怕的是我一直没有意识到这一点，甚至陷入其中乐此不疲。</p><p>带着这个想法，我开始重新审视我做的这个项目。首先这个项目的技术并不是非常复杂，任何一个有良好编程基础的人愿意花点时间都可以做出来；然后这个项目的提供的功能貌似是在法律的边缘摩擦，继续开发可能会带来一定的风险；最后这个项目的用户貌似是那么一群乐于白嫖的人。从以上三点出发，我觉得自己这一段时间确实是浪费在一个永远不会有回报的精力黑洞里面了。此时此刻我的心情是非常的复杂，懊悔自己最初做出的选择，同时又对关停这么长时间完成的东西有那么一些不舍。</p><p>最后我还是决定终止该项目了。及时止损，任何一个成年人都应该学会这一点，我也刚刚开始领悟这个道理。我觉得这是我弃坑历程的起始点，有了这一次弃坑经历，我在后面的抉择面前，能够更加坦然的做出决定。</p><p>现在回到我最初提出的问题：“当你在做某一件事，貌似已经陷入其中好多时日，某一天猛然反应过来，好像这件事并没有想像那么重要，你应该弃坑吗？”。虽然我上面的故事貌似是在鼓励弃坑，但我的本意并非如此。现在我给出我的观点，我认为最重要的是“初心”。</p><p>在面临“我应该弃坑吗？”这样的抉择面前，第一件事并不是要赶快反省甚至批判、贬低自己已经完成工作的价值，而是要好好审视一下自己的内心，“我最初到底是想要什么？”，然后根据这个标准，认真评价当前工作是否还在按照实现初心的路径前进。如果因为一些其他的外界事情干扰，工作偏离了航线，则需要判断是否有挽回的机会，毕竟就此放弃是人都会有不甘。如果最终判断这件事确实已经完全偏离了初心，其价值无法满足自己的期望，则应该坚定的终止。除此之外，还应该找个没人的地方，好好的捋一下，看看到底是一开始就错了，还是中途出现的偏离，为未来的决定收集好经验。</p><p>到这里，这篇博文算是可以结束了。至于我为什么要写这样一大段文字，主要是我最近看到跟我差不多年纪的年轻人，应该是比我小一点吧，也在沉迷于自己的项目中，没日没夜的维护、解决问题、开发新功能，这些工作耗尽了他几近全部的时间，以至于一直没有时间供他回过头来审视一下。我仿佛从他的身上看到了自己当初的影子，希望他不会像我一样，在某些地方浪费太多的精力，浪费自己大好的青春年华。（这么说好像我年龄好大了一样，我还很年轻好嘛）</p>]]></description></item><item><title>2021年终总结</title><link>https://zu1k.com/posts/thinking/2021/</link><pubDate>Fri, 31 Dec 2021 19:59:57 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/2021/</guid><description><![CDATA[
        <p>现在是2021年12月31号晚8点，还有几个小时就要迈进2022的大门。是时候回过头来，再看看我经历过的最不普通的一年了。</p><h2 id=个人相关总结><a href=#个人相关总结 class="header-mark headerLink">个人相关总结</a></h2><h3 id=学业><a href=#学业 class="header-mark headerLink">学业</a></h3><p>首先我要祝贺自己，在2021年6月，顺利结束了大学四年本科生涯，并在今年9月份，开启了研究生新篇章。</p><p>我所在的实验室叫“二进制分析实验室”，主要做二进制漏洞自动化发现相关的工作，还有两个师姐在做恶意流量识别的相关内容。在这个人工智能水论文的大潮流下，在我所处的学院，这个实验室应该是唯一一个能够逃离人工智能技术的地方，其实我的师兄师姐大部分也在用人工智能相关技术，但是我的导师给了我足够宽的选择空间，研究方向和使用的技术从我的爱好出发，因此从我的角度而言，无论最终会不会顺利产生成果，能够顺应自己的爱好，这样的研究生3年，应该是不会枯燥和痛苦。</p><p>然后是实验室的氛围。我发现周围的实验室好多都好压抑，大家每天在自己的工位上戴着耳机，几乎没有交流，除了卷王就是几乎啥都不会的“搞人工智能调参的那群人”，那样的实验室我是一秒钟也不想待。我们实验室就没有那么压抑，大家每天啥都讨论，无论是学术还是未来就业还是谈女朋友还有八卦新闻，最常谈论的话题就是中午吃什么，隔壁实验室的舍友羡慕我们每天实验室几个人一起出去小聚餐，惬意的很。我的师兄师姐也很关心和照顾我，真不错。</p><h3 id=友情><a href=#友情 class="header-mark headerLink">友情</a></h3><p>本科毕业，我与众多好友迎来了分别，他们有的进入企业开始自己的职业生涯，有的保研或考研至其他学校，这一别不知还要多久才能再次相见，江湖路远，期待我们都有光明的前途。</p><p>我仍然记得晚8点去软件园散步或慢跑的那些夜晚，更记得结束后去麦当劳来个甜筒、去老金来顿烧烤、去美莲整点水果的惬意，那些日子有你们陪伴，真好!</p><p>我的本科舍友，黄、尹、李，考研全部成功上岸，祝贺你们。其中尹、李和我在同一校区，黄在另一校区，真是幸运，我们还能继续在科研的道路上共同前进。</p><p>9月，我认识了我研究生时期的新舍友，汪、黄、甫，都是非常不错的伙伴，希望我们可以共同奋进，给研究生的3年画卷涂上绚烂的色彩。</p><h3 id=家庭><a href=#家庭 class="header-mark headerLink">家庭</a></h3><p>这一年，很明显能够看出父母亲又年老了。我很惭愧，对我的家庭非常惭愧，已经二十多岁的人了，还没有成为家里的顶梁柱，父亲还是需要在冰冷的海水里赚钱养家，母亲的腰也因为每天的操劳而生病甚至需要因此做手术。</p><p>不过21年也仍然是幸福的一年，家庭仍然温馨和睦。上研究生以来发了不少奖金，每个月也有不少生活补助，无需再跟家里要钱，还给家里打了几万块钱，给父亲买了新手机。我自己倒还没有换新手机，暂时觉得没有必要，毕竟再战3年可不是说着玩的。</p><p>好久没给爷爷奶奶打过电话了，不过再过不久就可以回家了，想必爷爷奶奶也想我了。</p><h3 id=我的生日><a href=#我的生日 class="header-mark headerLink">我的生日</a></h3><p>小时候每年都要过生日，长大后其实对这个就不在意了，上研究生后我也没有告诉任何人。加上正好是考试月，忙着复习，今年我自己也给忘记了，直到生日前一天我都没有发现。</p><p>父母仍然记着，提起一天发来了祝福和红包。</p><h3 id=我的感情><a href=#我的感情 class="header-mark headerLink">我的感情</a></h3><p>对我自己说，很抱歉，还没有女朋友</p><h3 id=开始用rust写程序><a href=#开始用rust写程序 class="header-mark headerLink">开始用Rust写程序</a></h3><p>20年因为某些机缘巧合了解到Rust并且开始想要学习，但尝试了好几次都没有坚持下去，再加上那段时间我对Go情有独钟，这个事就一拖再拖。</p><p>今年2月份Rust基金会成立，看到了相关新闻，Mozilla、AWS、Google、微软、华为等顶级企业或组织是其第一批成员，这坚定了我使用rust的信念。事实证明我的决定没问题，连挑剔的Linus都接受了Rust对内核开发的涉足，这是cpp都没有的待遇。</p><p>刚看了一下我的仓库列表，今年在9个项目中主力使用Rust开发，根据wakatime统计的数据，写rust时长接近200小时，总行数超过4w行(只计算了增加的行数，没有计算删除的行数)。</p><p>Rust已经成为我最喜欢的编程语言了，这是事实，虽然一次性小脚本我还是会用py，需要并发的临时小工具我还是会用go，和同学合作我还是会用java，但是我新开启的项目已经首选rust了。Rust的性能和表达能力都很优秀，就业岗位暂时不是很多意味着还没有很卷，大企业和Linux对rust的关注代表着它的前途，希望身边还没有开始Rust的同学马上开始行动。（我就是Rust吹，宣传小能手，身边3个同学开始动身学习rust了）</p><h3 id=参与开源项目><a href=#参与开源项目 class="header-mark headerLink">参与开源项目</a></h3><p>参加了今年的“开源软件供应链点亮计划”，体验不错。项目用的go，需求比较简单，主要代码一两个晚上搞定，然后根据社区导师的建议小修小补。感谢社区导师@xuanwo, 给我提供了不少帮助。推荐学弟学妹们参加这个活动，有钱！中等难度项目9000块，赚的非常轻松。</p><p>在某群看到了SOFAStack社区发布的小任务，就给他们的Layotto项目做了两个PR，顺便学习了wasm相关知识，特别是使用wasm写插件系统时，能力引入(导入表)和变长参数传递相关内容有了更加深入的了解。拿到了证书和马克杯，感谢。</p><p>写copy-translator项目时，给egui库做了几个小贡献，没想到头像居然出现在前10了，还被同样在学习rust的好朋友发现了，真不错。</p><p>今年总共有3个项目曾进入过GitHub Trending，分别是 Golang写的proxypool（一个已经弃坑的项目，没想到还这么受欢迎）、copy-translator、good-mitm，后两个都是rust写的。</p><p>GitHub Followers数目在2021年突破1k。</p><p>参与开源的感觉真心不错，22年再接再励！</p><h3 id=被邀请实习><a href=#被邀请实习 class="header-mark headerLink">被邀请实习</a></h3><p>这里开始吹嘘自己</p><p>因为写了<a href=/posts/tutorials/p2p/ipfs/ rel class=post-link>《IPFS新手指北》</a>，Protocol Labs问有没有兴趣"working internally with Protocol Labs"。（那必须的，我很感兴趣，我喜欢这些东西！）</p><p>因为写了copy-translator，某IM初创团队私信问我"有没有兴趣一起做一些有挑战的事情"。（曾经真的有一段时间我特别想做一款IM，我很感兴趣！）</p><p>因为写了<a href=/posts/events/pinkbot/ rel class=post-link>《从最近披露的Pink僵尸网络想到的》</a>，收到360 Netlab的邀请。（说真的，接到电话的我感到受宠若惊，了解后发现他们在做的东西这不就是我想搞的嘛，这可太感兴趣了！）</p><p>可能是从GitHub Trending看到了我，收到了Shopee Singapore的HR发来的邮件，真不错，以后有机会想run去新加坡。</p><p>他们都是非常有吸引力的团队，我也非常希望自己能够参与其中。但是因为某些原因，我暂时没有办法集中精力投入自己的全身心，这里只能说一声抱歉，希望未来的某一天，我们可以一起为同一个目标努力。</p><p>同时，我也想告诉我身边的同学和我的朋友，写博客和做开源项目真的可以起到宣传自己的作用哈哈哈。</p><h3 id=内卷的加重><a href=#内卷的加重 class="header-mark headerLink">内卷的加重</a></h3><p>这部分看过我<a href=/posts/thinking/fuck-involution/ rel class=post-link>《干！有人在卷我》</a>这篇文章的同学能够看懂。</p><p>还是那个任课老师，听同学说，他今年在课上，说起字数的问题，“去年没有说字数的问题，很多同学问字数的问题，今年强调一下，我们没有字数限制。。。。”</p><p>然后，我那那篇文章，实验室一同学在某节课讨论时，被不小心传播开了。哈哈，听说他们今年已经开始1w起步了，身边有人已经写1w7了，这就是内卷的加重啊</p><p>然后，学校旁边的羊汤店，还在卷，饼可以免费不限量吃了。</p><h2 id=行业相关总结><a href=#行业相关总结 class="header-mark headerLink">行业相关总结</a></h2><p>我是比较关注新闻的，特别是计算机、互联网相关行业，今年看到不少新闻，也不知道是今年不太平还是我之前不够关注这方面</p><h3 id=裁员><a href=#裁员 class="header-mark headerLink">裁员</a></h3><p>就是近两个月，已经接连听到国内二十多家互联网公司大幅裁员的新闻，我已经工作的朋友之间传着即将迎来“互联网寒冬”的话，也看到了国外某企业通过zoom会议裁员被喷的故事。</p><p>已经工作的好友想赚够留学的钱然后润(run)去欧州读PhD</p><p>同时，今年我还见证了一纸文书毁灭整个课外辅导、在线教育行业。今年年初，我还在和朋友谈论某某本科同学顺利拿到猿辅导SSP，总包60W，而就在今年，也不知道他来没来得及转正，反正肯定被裁了，太倒霉了。</p><h3 id=大佬去世><a href=#大佬去世 class="header-mark headerLink">大佬去世</a></h3><p>Redox OS活跃贡献者jD91mZM2今年在不正常的离线时间后，被证实去世，证据指向精神健康事件后的自杀，Redox官方发文呼吁要<a href=https://www.redox-os.org/news/open-source-mental-health/ target=_blank rel="noopener noreffer" class=post-link>《关注开源贡献者的心理健康》</a>。</p><p>&ldquo;The code doesn’t write itself, and the person writing the code needs even more maintenance than the “open source” itself.&rdquo;</p><p>这个月，前段时间，听说腾讯天美一员工自杀，后来证实是毛星云大佬，也不知道是不是心理健康原因。让我震惊的是腾讯对消息的封锁，在腾讯工作的同学说，内部谈论这个事是被禁止的，所以即使是他们也只能从外部途径才知道去世的是毛星云，真是讽刺。</p><p>对了，我们也不能忘记，21年二十多位院士逝世，他们献身科研，一生为国尽瘁，让我们向他们致敬。</p><h3 id=劳动者权益><a href=#劳动者权益 class="header-mark headerLink">劳动者权益</a></h3><p>这是前段时间看到的新闻，南山必胜客败诉给一个员工，根据劳动法等相关法律。说明我们不能怂</p><h3 id=漏洞><a href=#漏洞 class="header-mark headerLink">漏洞</a></h3><p>Apache Log4j RCE漏洞，全球很多顶级的企业<a href=https://github.com/YfryTchsGD/Log4jAttackSurface target=_blank rel="noopener noreffer" class=post-link>受影响</a></p><p>这个事件我们看到：</p><ol><li>开源项目没有收到赞助，全靠用爱发电。这样不对！</li><li>情报披露问题，阿里云被罚</li><li>互联网好脆弱啊，基础组件就这么不受关注嘛？</li></ol><p>然后，我还想到了今年看到的一些文章和亲身经历过的攻击，针对安全研究人员的攻击真的越来越多了：</p><ul><li>我中了水坑，利用浏览器相关漏洞给我植入了木马，还被某部门上门</li><li>泄漏的IDA含有后门</li><li>针对安全工具反打的方式（以后得格外小心了）</li><li>Log4j这个洞出来后，马上出现了在某些段写payload的方式攻击Ghidra</li></ul><p>我还想说，国内的安全研究环境越来越差了，特别是政策方面</p><h3 id=讨论的消亡><a href=#讨论的消亡 class="header-mark headerLink">讨论的消亡</a></h3><p>最近吃的瓜有点多，无论是娱乐圈还是政圈</p><p>有的瓜被证实了，有的瓜却迟迟没有"辟谣"，也不知道是真谣还是假谣</p><p>肉眼可见的是豆瓣、知乎、微博等平台，评论的收紧、限制等措施</p><p>然后，今天看到的新闻：阿里巴巴出售旗下weibo的全部股份，微薄将成为30%国资媒体。新新闻，不多评论了</p><p>推荐一篇文章：<a href=https://www.gcores.com/articles/121924 target=_blank rel="noopener noreffer" class=post-link>中文互联网中“讨论”的消亡</a></p><h3 id=互联网中心化的脆弱性><a href=#互联网中心化的脆弱性 class="header-mark headerLink">互联网中心化的脆弱性</a></h3><p>fastly炸掉，全球顶级网站几乎全部不可用</p><p>不得不反思，当互联网走向集中化，当巨头控制绝大多数资源，当选择变得唯一，一切都会变得极其脆弱。</p><p>IPFS所倡导的分布式web会是未来吗？我不知道答案，但是尝试总是好的</p><h3 id=github-copilot><a href=#github-copilot class="header-mark headerLink">GitHub Copilot</a></h3><p>GitHub用其托管的代码训练的人工智能，能够有效协助写代码，特别是py,js等。</p><p>但是当我使用Rust时，它的自动补全甚至成为了我的累赘，不断的自以为是打断我的思路，因此我把它关闭了。</p><h3 id=炒币挖矿元宇宙><a href=#炒币挖矿元宇宙 class="header-mark headerLink">炒币、挖矿、元宇宙</a></h3><p>舍友沉迷炒币、挖矿、元宇宙</p><p>我不看好，但是不介意在这个没有监管的地方捞一笔</p><h3 id=疫情的现状><a href=#疫情的现状 class="header-mark headerLink">疫情的现状</a></h3><p>变异的病毒在传播，情况不容乐观</p><p>我也没深究，听说mRNA疫苗修改起来简单，可快速开发适合变异后病毒的疫苗，真是厉害啊，一开始他们就想到这一步了吗？如果是，还是得努力追赶啊。</p><p>最近又听说已经有特效药了，厉害啊。</p><p>看到最近西安相关新闻，我跟我妈妈说要稍微屯点东西。</p><h2 id=思考><a href=#思考 class="header-mark headerLink">思考</a></h2><p>这一年，因为看到、听到、经历到的各种事情，我也开始对人生、对理想、对未来、对社会、对人进行了更加深入的思考。这些思考还未形成文字，很多只是心里的一个想法，还需要后面的人生经历进行巩固和验证。</p><p>有几点比较自私的想法，我想记录在2021年，供未来的我思考和批判</p><ol><li>以改变阶级层次为最终目标</li><li>程序员要努力活得久</li><li>家庭幸福、开心最重要</li></ol><p>是不是很自私？不要嘲笑我！</p><p>好了，现在是21年12月31日22点42分，是时候关闭电脑回宿舍了。</p><p>2022，你好！</p>]]></description></item><item><title>虚假的安全感</title><link>https://zu1k.com/posts/thinking/false-sense-of-security/</link><pubDate>Tue, 05 Oct 2021 10:30:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/false-sense-of-security/</guid><description><![CDATA[
        <p>凌晨3点，一阵凉风把我吹醒</p><p>我点亮手机屏幕，一条推送新闻映入眼帘：“<strong>苹果公司让iCloud Safari书签也实现端到端加密</strong>”</p><h2 id=端到端加密><a href=#端到端加密 class="header-mark headerLink">端到端加密</a></h2><p>“<strong>端到端加密</strong>”，他们总喜欢用这样一些看起来高大上的词汇</p><p>我对这个词颇为熟悉，原本不想多说，但为了本文的部分读者，我还是稍微解释一下为好</p><p>所谓的“<strong>端</strong>”，即指你的<strong>客户端</strong>，该新闻中指你的苹果设备</p><p>“<strong>端到端加密</strong>”就是说你的数据在对外传输之前会进行加密，<strong>只会在接收的客户端进行解密</strong>，而在网络传输和苹果的数据库存储这些<strong>中间过程中不进行任何解密操作</strong>，这就能保证你的数据只有你可见，其他中间人看到的都只是加密的数据，从而保证你的数据安全</p><h2 id=安全吗><a href=#安全吗 class="header-mark headerLink">安全吗？</a></h2><p>很明显，苹果此举是为了保证你的数据安全，但这样是不是就保证了你的数据除了你之外没有人可以看到呢？</p><p>先别急着回答，让我们先来捋一下：</p><ol><li>现代密码学保证数据被加密后其他人看不到原文（期望上如此）</li><li>端到端加密保证了数据离开你的设备后呈现的都是密文状态</li></ol><p>这样看来，端到端加密理论上可以保证你的数据别人看不到</p><p>再来看看这条推送新闻:</p><blockquote><p>据 Reddit 论坛信息，苹果“iCloud 安全概述”页面的更新显示，与 Safari 标签和历史记录相同，Safari 书签现也更新为端到端加密。</p><p><strong>这意味着任何人，甚至是苹果，都无法访问用户保存的 Safari 书签。</strong></p></blockquote><p>新闻中都这样说了，不管懂不懂，反正我们便要相信它了</p><h2 id=真的如此吗><a href=#真的如此吗 class="header-mark headerLink">真的如此吗？</a></h2><p>等等！！！真的如此吗？</p><p>我在苹果的ToS中发现了这样一段话：</p><blockquote><p>您确认并同意，Apple 在其认为合理必要或适宜的情况下可以访问、使用、保存您的帐户信息和任何内容以及/或者将您的帐户信息和内容披露给执法机构、政府官员和/或第三方而无需向您承担任何责任</p><p>来自：https://www.apple.com/legal/internet-services/icloud/cn/terms.html</p></blockquote><p>如果他们真的无法解密你的数据，那他们如何将你的数据提供给执法机构呢？</p><p>前面的内容我们似乎都忽略了非常重要的一点：<strong>真正用来加密数据的密钥由谁持有？</strong></p><p>根据我的编程经验，我们通常不会使用用户的密码直接来加密数据，主要有以下原因：</p><ol><li>用户的密码通常不够长，不符合安全密钥的长度要求</li><li>如果用户修改密码，使用密码直接加密数据需要对所有数据重新加密，这很耗时耗资源</li><li>数据库中通常不会存储明文密码，如果用户忘记了密码，则用户数据便无法恢复了</li></ol><p>我们一般通过以下方法之一来解决问题：</p><ol><li>直接生成符合要求的随机密钥，然后用用户密码来加密存储密钥</li><li>直接生成符合要求的随机密钥，建立用户与密钥的映射，所有密钥由服务商统一加密保存</li></ol><p>不难看出，使用用户密码加密存储密钥，这种方案在服务商不存储用户密码明文（或者其他任何可以用来解密密钥的信息）的情况下，安全性很高，但是如果用户忘记密码则难以恢复用户数据</p><p>而在实际工程化的解决方案中，为了能够在特殊情况下为用户恢复珍贵的数据，通常密钥不会直接交由用户持有，而是通过服务商的安全基础设施和安全承诺信用来保证的</p><p>那苹果是采用哪种方案呢？</p><p>我在苹果的 <a href=https://support.apple.com/en-us/HT202303 target=_blank rel="noopener noreffer" class=post-link>iCloud security overview</a> 一文中找到了这样的内容：</p><blockquote><p>On each of your devices, the data that you store in iCloud and that&rsquo;s associated with your Apple ID is protected with a key derived from information unique to that device, combined with your device passcode which only you know. No one else, not even Apple, can access end-to-end encrypted information.</p><p>翻译：在你的每台设备上，你存储在iCloud中并与你的Apple ID相关联的数据，都受到来自该设备独有信息的密钥的保护，并与只有你知道的设备密码相结合。其他任何人，甚至是苹果，都不能访问端到端加密的信息。</p></blockquote><blockquote><p>Data types that are protected by end-to-end encryption—such as your Keychain, Messages, Screen Time, and Health data—are not accessible via iCloud Data Recovery Service.</p><p>翻译：受端到端加密保护的数据类型&ndash;如你的钥匙串、信息、屏幕时间和健康数据&ndash;不能通过iCloud数据恢复服务访问。</p></blockquote><p>通过这句话可以推测，苹果应该采用的是用用户密码来加密密钥的方案，这很安全</p><p>但这是真的吗？苹果在这方面一直保持闭源，没有任何外部人员可以确认这一点，这些承诺会不会成为“虚假的安全感”呢？</p><p>说了这么多，其实我们就想知道服务商到底能不能在不经我们允许的情况下解密我们的数据</p><div class="details admonition warning open"><div class="details-summary admonition-title"><i class="icon icon-attention-circled"></i>注意<i class="details-icon icon-angle-circled-right"></i></div><div class=details-content><div class=admonition-content>这里的“<strong>允许</strong>”不是说整个弹窗让我们点一下同意按钮，而是真正需要我们提供一个“<strong>秘密</strong>”才能继续解密下去</div></div></div><p>我想起了之前看到的 “<strong>泥坑实验</strong>”</p><ol><li>把你的设备扔进一个泥坑中</li><li>滑入泥坑中，并砸碎自己的脑袋。当你恢复意识时，你将完全恢复，但是你将永远无法回忆起你的密码和密钥等内容</li><li>尝试恢复你备份在云端的数据</li></ol><p>实验可能难以真正实施，但是可以采取一些其他的折中手段，比如假装自己失忆，说一些谎言啥的</p><p>无论用了什么办法（证明自己身份、找司法机关帮助、和库克是好朋友等等），如果你可以成功恢复你的数据，那代表着你的数据不是真正的安全</p><p>你应该能明白这意味着什么，暂且不说司法部门等合法要求解密数据，只要服务商有途径解密数据，入侵者就有可能不经过你的同意获得你数据的明文</p><h2 id=虚假的安全感><a href=#虚假的安全感 class="header-mark headerLink">虚假的安全感</a></h2><p>我们都相信“没有绝对的安全”，但我更有理由相信，比知道“不安全”更可怕的情况是，<strong>认为</strong>自己处于“安全”的位置，我称其为“虚假的安全感”</p><p>就像前面新闻中提到的那样，如果读者对相关知识和加密方案没有了解，就会被文中的词汇迷惑，完全相信文中那些并非由服务商自己说出的承诺（即使是服务商自己承诺的，也不完全可信）</p><p>在这种情况下，如果你相信自己交给服务商的数据完全安全，就有可能在未来的某一天被其反噬</p><p>其实，这种“虚假的安全感”在很多地方都有可能发生，我可以给大家讲一个发生在我自己身上的真实故事，相关细节我会进行模糊处理</p><h3 id=被攻击的真实案例><a href=#被攻击的真实案例 class="header-mark headerLink">被攻击的真实案例</a></h3><p>某天上午，我同时接到导员和党委书记的电话，说学校网络管理部来了两个工作人员，让我带着电脑过去给他们提供一点帮助。我<strong>没有多想</strong>，背着电脑包屁颠屁颠的过去了，却发现不是学校网管，而是某部门来了两个人</p><p>他们详细询问了我近一个月的网络活动，询问我是否与某列表中国外某些黑客组织有联系，并检查了我的笔记本电脑。反正我也没做坏事，按照流程走下来也没发现什么异常，但他们给我看的某个网址给我留下了印象</p><p>回去后，我找到了那个网页，那是FreeBuf中的一篇文章，内容是Google纰漏的一起APT攻击的相关情报。我根据其内容找到了Google原文并找到了更多信息，当晚我根据相关思路对我的电脑进行了细致的检查，最终发现了一个异常进程</p><p>通过对该程序进行逆向分析，我发现样本与Google纰漏的样本虽有不同，但诸多特征和证据表明其与该APT组织的攻击程序同源，由此证明我的电脑遭遇了国外APT组织的攻击</p><p>我马上联系了他们，他们坦白的确是因为这个原因来找我的。根据他们的监控，这是此APT组织发起的第三波攻击，国内有其他安全研究者也同样中招</p><p>通过对我电脑中文件写入记录（可以修改的）、服务添加记录、路由器中的上网日志、学校的DNS日志等信息进行综合分析，基本确定被攻击的大体时间范围和攻击手段</p><p>通过结合当天微信聊天记录，我回忆起被攻击当天我在研究某服vpn客户端，上网查了一些相关研究案例，而结合Google纰漏的情报，我极有可能触发了他们的水坑，通过浏览器漏洞执行了黑客的恶意代码</p><p>这个事件到这里并没有结束，我想说的关键才刚刚开始</p><p>被攻击的时间点前两周我刚重装了系统，最新的Windows10打上所有安全补丁，最新的Chrome浏览器。通常认知下，将系统和软件更新到最新并打上安全补丁，应对基本的网页浏览是基本可以放心的</p><p>但实际情况就这样狠狠的打了脸，事实证明，那些我以为的最新版带来的安全感都是“虚假的安全感”，在真正的攻击面前毫无招架之力</p><h2 id=夸大危险也许更加可怕><a href=#夸大危险也许更加可怕 class="header-mark headerLink">夸大危险也许更加可怕</a></h2><p>我不想我的读者读了我上面的内容，产生“反正世界上没有绝对的安全，无论怎么努力都仍暴露在危险之下，那还努力个啥？”的想法</p><p>我上面的内容的确夸大了大家面临的危险，绝大多数人都没有被攻击的价值</p><p>相比“虚假的安全感”，“夸大危险”也许更加可怕，因为认为危险无法避免而放弃抵抗的案例比比皆是</p><p>举一个身边最真实最普遍的例子，大家在拥有了安全研究经验后，往往会发现几乎所有现有的杀毒软件等难以发现和阻拦最新的0day攻击，所以大家往往干脆不安装杀毒软件</p><p>要知道，即使是最小的防御措施也能够起到一定的阻拦作用，虽然无法阻拦最新的0day，但是面对各种脚本小子还是能够轻易防护的，无论如何都比没有强</p><p>夸大的危险极易使人放弃抵抗，从而使自己暴露在更大的危险之下，这比“虚假的安全感”更加可怕</p><h2 id=我的态度><a href=#我的态度 class="header-mark headerLink">我的态度</a></h2><p>我还年轻，经验太少</p><p>我面对危险和安全的态度也许会随着之后的人生经历而产生变化，但无论如何我还是记录以下我现有的想法吧</p><h3 id=资产梳理><a href=#资产梳理 class="header-mark headerLink">资产梳理</a></h3><p>我的第一个想法是资产梳理，对自己有价值的东西进行梳理，包括各类物理可接触的东西和虚拟不可接触的数据</p><p>正所谓“知己知彼，百战不殆”，如果自己都不知道自己拥有那些有价值的东西，那几乎就等于将这些遗忘的东西拱手让人</p><h3 id=价值分级><a href=#价值分级 class="header-mark headerLink">价值分级</a></h3><p>然后是价值分级，按照资产的价值高低对所拥有的东西和数据进行划分不同等级</p><p>这很好理解，高价值的东西采取高安全性的措施，低价值的东西可以稍微放松一点</p><p>毕竟较高的安全性往往带来复杂性的增加，而人的精力有限，无法对所有内容都采取最高安全措施</p><h3 id=谦虚与谨慎><a href=#谦虚与谨慎 class="header-mark headerLink">谦虚与谨慎</a></h3><p>我看到上面案例中的两个人，他们习惯于用随身携带的笔记本记录内容，习惯于使用不可多次写入的CD光盘来传输数据，习惯于用手随时遮挡正在书写的内容</p><p>虽然他们的安全技能高出常人许多，但他们对各种小细节都保持者最大的谦虚和谨慎，我认为这是保证安全性的最基本也是最重要的东西</p><h2 id=拓展阅读><a href=#拓展阅读 class="header-mark headerLink">拓展阅读</a></h2><ul><li><a href=https://blog.cryptographyengineering.com/2012/04/05/icloud-who-holds-key/ target=_blank rel="noopener noreffer" class=post-link>iCloud: Who holds the key?</a></li><li><a href=https://www.Base64decode.org/ target=_blank rel="noopener noreffer" class=post-link>NkkySjVweW81NXFHNVlXMTVaS000b0NkNTRpeDZMQ0I2TENCNG9DZDZZTzk1WStxNUx5YTViaW01cDJsNXB1MDVhU2E1NXFFNVkyeDZabXA=</a></li></ul>]]></description></item><item><title>干！有人在卷我</title><link>https://zu1k.com/posts/thinking/fuck-involution/</link><pubDate>Thu, 17 Jun 2021 23:08:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/fuck-involution/</guid><description><![CDATA[
        <p>“干！他妈的我被卷了。我不能接受！” 一个研究生学长这样告诉我。</p><p>这是我提前选修的研究生课程，按照提交的文档评成绩，本是上个学期的课程却拖到这个学期末才出成绩。我很诧异自己拿到的成绩没有过平均线，但历年来该课程老师的极低评价我也有所耳闻，因此自己也算能够勉强接受。</p><p>然而那个研究生学长却没听说过该老师，算是踩了个大坑。他的学习态度我是见过的，很努力很刻苦，最后给他不到70分的成绩和倒数的名次给谁也接受不了，我建议其申请成绩复议。后来他跟我说，那个老师给他发了第一名97分的文档，人家提交了21页，足足有1万5千字。而他只提交了3000字。</p><p>所以我知道了，我应该也被狠狠的卷了，因为我也只提交了3000字。但我拿到了80分（草，没过平均线），虽然没有什么用。我拿到了那份21页的文档，原来也是提前选修的同学，是个女生，见过几面，挺温柔的，所以我不想批判她。（我劝各位读者不要他妈多想）</p><p>亲身经历过内卷（是被卷的一方），这段时期又刮起一阵反内卷风，B站各种《内卷的名义》等反内卷题材小短片，“躺平”这个词被大众广泛接受（我不喜欢内卷，但也不支持躺平），我就想，是时候写点东西了。可能不是很深刻，但也算是我在这个时期的一扑棱，毕竟还是有同学和陌生人来看我写的文字的，感谢大家。</p><h2 id=我参与过内卷吗><a href=#我参与过内卷吗 class="header-mark headerLink">我参与过内卷吗？</a></h2><p>在开始之前，我想先回答这个问题：“我参与过内卷吗？”。毕竟大家都不喜欢内卷（我想至少我的读者应该是这样的），我不想一开始就成为大家口中的“内卷人”。</p><p>对于这个问题，我想，应该没有吧。</p><p>但是我想让大家来评判，请看以下两个例子，算是学生阶段能够遇到的两个最典型最容易产生内卷的场合：</p><ol><li>要交课程报告。虽然没有规定字数，但我坚决不会让我的报告低于3000字，一般写3200-3500字。我认为这是学生提交报告的本分，至少不要让老师觉得你太敷衍吧。</li><li>要期末考试了，得提前复习。虽然平时上课我都会仔细听（认识我的别打我啊，我可是每堂课都坐前几排的，虽然在老师眼皮底下玩手机真的很爽，虽然我不做任何笔记，但是我真的有仔细听课），但考试前还是要好好复习的，提前一个周吧，考试前两天会疯狂背书和做题。</li></ol><p><strong>一些身边人的情况</strong>：</p><ol><li>课程报告，没规定字数和格式是吧，那先来他2w字。什么封面、目录、图片、表格能有的全给他整上，内容要分章节，最好不少于5章，最后还要有总结和引用文献。关键内容要加粗和标红，不能让审阅老师看不到啊。什么，你说内容？内容谁看啊，管他合不合适，只要与主题有点关系的先写上再说，反正多出来的又不会扣分。（真事，大一下，找那个老师理论，她坦然承认自己评阅标准有问题，但是不能改分。她承诺我后面如果哪门课感觉要挂，可以找她，她帮我去找相关老师求情。？？？？？？？去她妈的！我会挂科吗？她这算放了一个屁吧朋友们）</li><li>期末考试，那不得提前两个月甚至半个学期就开始复习和刷题了。课后题啥的做不到完全背过那答案总得背过吧。光看课本和PPT那怎么行，吉米多维奇不得刷他个3遍以上，然后历年考试题也得整一下吧。到考试了，全他妈是吉米多维奇上的原题，这不得写他个两种甚至三种解法。（也是真事，这些人也真是，我可不想为了八十分与九十分的差距付出这个时间）</li></ol><p>所以，你说我参与过内卷吗？这样看来我是不是很正常吧。</p><h2 id=是什么造成了内卷><a href=#是什么造成了内卷 class="header-mark headerLink">是什么造成了内卷？</a></h2><p>内卷的产生不是偶然，内卷的环境+不合理的评判标准+竞争的人导致了内卷的必然发生，至少我是这样认为的。</p><p>所谓内卷的环境，那必然要是金字塔形状，底层占绝大多数，只有少数人可以上升，这样就会形成竞争的原因。甚至要严格限制上升的人数，这样才能使竞争更加激烈，才会孵化出各种竞争手段。</p><p>有了引起竞争的条件，形成的是竞争的行为，如果评判标准合理，最终的结果是通过健康的竞争选拔出真正有实力的人，这应该是一个正向的积极的过程。可惜，绝大多数情况这个评判标准并不合理，更有为了利益为了压榨故意采用恶心人的标准的，比如企业里面单纯通过工作时长来评判、比如老师单纯通过字数来评判等等。</p><p>这就是恶心人的地方，拥有决定权的人通过设立不合理的评判标准，故意引起底层内卷，从而满足自己的利益。而作为内卷的主要参与者———竞争的人，却是这三个条件中最可怜的那一部分，不仅需要付出大量努力、时间等参与到内卷中，还有很大几率无法在内卷中脱颖而出，从而白白浪费了自己的时间精力等；他们还需要承受内卷同仁的满满的恶意，竞争者之间往往就是这样，在内卷局中的人难以看清形势，难以把矛头对准真正掌握规则、真正引起内卷的上层管理者和标准制定者，他们只会在底层互相伤害。真是可悲啊。</p><h2 id=如何摆脱内卷><a href=#如何摆脱内卷 class="header-mark headerLink">如何摆脱内卷？</a></h2><p>这个问题我无法给出答案，因为我也不知道。毕竟就目前的形势而言，只要内卷的条件还存在，就总会有人参与其中。我个人认为要打破这个局，还是需要从上而下的反内卷，底层难以闹出风浪。</p><p>但就目前情况来看，貌似上面并不想真正反内卷。可能迫于底层舆论压力，他们会增加反内卷的宣传。可这有什么用，不打破内卷的条件，只要内卷的环境和不合理的评判标准还存在，内卷就不会减轻。他们可真是坏啊，他们想要从底层的内卷中获利。</p><p>也许，真正的社会主义社会是划破黑暗的那一束光，她会是吗？</p><h2 id=我是否曾从内卷中获利><a href=#我是否曾从内卷中获利 class="header-mark headerLink">我是否曾从内卷中获利？</a></h2><p>这个问题我必须回答“是”，甚至还有点小开心。因为我不是以内卷者的身份参与其中，不需要付出任何努力，通过他们的内卷和恶性竞争，我作为一个旁观者可以直接获利。</p><p>不说当年的各种打车软件之间恶性竞争、疯狂烧钱，打一次车只需要一分钱，那个时候我还上初中，哪懂什么内卷。</p><p>就看大学这两年，校外那条小吃街。起初只有一家羊肉汤店，算是这条街羊肉汤方面的绝对垄断，价高味不美，肉还不多。去年其隔壁新开了另一家羊肉汤店，一开始还只是两家的老板娘到店门口招呼人进各自的店，慢慢的两家开始让利，一家店搞抽奖送饮料送凉菜，另一家店直接进店即送葱油饼。</p><p>两家店卷起来了，我们这些看热闹的吃客可开心的很，免费的饼吃着，免费的饮料喝着，连碗里的羊肉也变多了。</p><p>你说内卷好不好？老板娘肯定烦得很，但我们这些从中获利的人怎么会放过她们。</p><h2 id=卷我可以请换种方式><a href=#卷我可以请换种方式 class="header-mark headerLink">卷我可以，请换种方式</a></h2><p>这个环境就是这样一个环境，大家都是底层，都想要更高的名次、更好的待遇、更多的钱，那就总有人要付出更多的努力和汗水。对于这些努力的人，我选择原谅他们上进的心，但我绝对不原谅他们卷我采用的手段和方式。我看不起你刷更多的题而没有把时间投入到自己真正感兴趣的领域，我看不起你拼凑更多的文字却没有包含自己丁点的思考，用这种方式来卷我简直就是在侮辱我，在侮辱每一个共同学习一起进步互相竞争的同伴。</p><p>如果你真想卷我，请换种方式。我希望你的内容包含更深刻的理解，或者在追寻更尖端的研究热点；我希望你的工作有更高的技术含量，或者给更多的人带来便利；我希望你的答案有更深入的思考，或者有你自己的东西在里面。请让被卷的我感受到来自竞争者的尊重，让我输的心服口服，让我能够去尊重你。</p><h2 id=最后可乐><a href=#最后可乐 class="header-mark headerLink">最后，可乐</a></h2><p>这个也是前段时间看到的，你说可口可乐和百事可乐也是在竞争，为啥可乐的价钱不下跌呢？</p><p>之前也没思考过这个问题，一开始也就想已经把价格压到一个比较低的价位了，再降价可能不太值？毕竟一些国产汽水的价格也不低。</p><p>现在想想肯定没有这么简单，已经是完善的大规模工业化生产流程了，生产瓶汽水平均成本很低，这个价应该还有不低的利润空间，那他们为何不通过降价来抢夺市场，为啥不像国内之前打车软件那样甚至不惜倒贴钱来竞争呢？</p><p>我怀疑是他们脑子正常，搞明白了内卷的损人不利己，清楚恶性竞争的危害&mldr;&mldr;</p><p>最后祝大家都能够成功摆脱内卷，可以像交大cxs一样，可以不参与内卷但仍有机会凭借自己的实力得到自己满意的结果。</p>]]></description></item><item><title>反对直接学习经过提炼的知识</title><link>https://zu1k.com/posts/thinking/knowledge-refining/</link><pubDate>Mon, 05 Apr 2021 19:12:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/knowledge-refining/</guid><description><![CDATA[
        <p>这个时代是一个内容爆炸、知识爆炸的时代，文字、图片、视频、书籍等资料比以往更加容易获取，还有来自于各种各样的软件、媒体的信息应接不暇，所有人都主动的或被动的处于持续学习的阶段。</p><p>为了能够更快速、更高效的获取知识，很多人会选择直接学习别人总结提炼过的内容。这种行为非常常见，学生购买的各种总结性资料例如学长笔记、知识点提纲、公式定理小手册，程序员阅读总结性文章等。</p><p>这种通过直接学习提炼过的内容的方法比普通的循规蹈矩的方法速度快很多，在绝大多数情况下解决问题也比传统方法更加有效，因为其能够直接指出关键点，能够直接给出解决方案，因此非常受大家喜爱。</p><p>在我看来，如果仅仅是要对某一方面知识进行粗略了解，这种方法行之有效，但如果想要在某一领域深入，甚至以后想要通过该领域养活自己，就必须避免使用这种捷径方法。</p><h3 id=提炼的知识丢失了很多细节><a href=#提炼的知识丢失了很多细节 class="header-mark headerLink">提炼的知识丢失了很多细节</a></h3><p>进行内容提炼必定会丢失细节，这是毫无疑问的。抱着学习的态度，我们还要考虑更多因素，包括进行内容提炼的人他自己的水平，还有提炼者自己的研究是否侧重于某个特定方向，从而可能导致内容的偏向性和不全面。</p><h3 id=提炼的知识只包含结果丢失了过程><a href=#提炼的知识只包含结果丢失了过程 class="header-mark headerLink">提炼的知识只包含结果，丢失了过程</a></h3><p>从初高中一直到大学，看过一些总结性内容，包括学长笔记、考点汇总等等。我发现这些内容为了能够更直接的传达内容，往往只包含结果，而丢失了这个内容是如何来的或者为什么如此的过程。</p><p>不是说这些总结提炼的内容不好，我反对的是为了省事而跳过对知识的由来和证明的学习。</p><p>从问题的提出到分析再到最后解决从而总结出知识的过程，比学习这个知识本身更有价值。很多知识我们后面的人生中可能根本用不到，但在这个过程中用到的方法我们如果掌握了，就可以迁移到其他新问题的解决中，这可能比某个知识本身更有价值。</p><h3 id=提炼的知识影响了拓展思维><a href=#提炼的知识影响了拓展思维 class="header-mark headerLink">提炼的知识影响了拓展思维</a></h3><p>提到影响拓展思维，其实我想表达的是，直接学习提炼的内容，目的性太强，以至于难以进行胡思乱想。</p><p>我从小在学习新事物的时候总会进行各种奇奇怪怪的联想，我不认为这会导致我的注意力分散，相反，我认为这种联想应该是必不可少的，能够为以后的发展拓宽思维，避免陷入木偶人生。</p><h2 id=应该在学习过程中掌握的能力><a href=#应该在学习过程中掌握的能力 class="header-mark headerLink">应该在学习过程中掌握的能力</a></h2><p>实话实说，我早已没有了小时候那个学遍所有可以接触到的知识的幻想，知识的种类和覆盖的范围如此广泛，在计算机和网络盛行的时代，掌握知识的数量早已不是衡量一个人能力高低的标准，学富五车也敌不过随时查一下互联网。</p><p>那我们学习知识是为了啥？在我看来，学会如何进行学习，学会如何进行提升，这个能力才能保证自己的不断进步，才是在学习基础知识的过程中必须掌握的能力，是比知识本身更为重要和珍贵的东西。</p><h3 id=发现问题的能力><a href=#发现问题的能力 class="header-mark headerLink">发现问题的能力</a></h3><p>越来越发现，能够发现问题的确是需要特殊培养的能力。很多情况下，明明一个非常新颖的问题就在眼前，可就是没有那个去发现它的慧眼，白白把机会让给了别人。一个典型的例子就是牛顿被苹果砸了一下然后经过研究发现了万有引力，我从心底里相信这个故事是特意编出来的，但是还是应该反思一下自己，小时候自己提出过类似的问题吗？</p><p>在学习的过程中，如果能够去了解一下古人如何提出一个问题，就会慢慢的学习到如何去看待一个新发现的事物，甚至能够从日常可见的已经习以为常的事物中发现新的问题，这是非常了不起的能力。</p><h3 id=分析问题的能力><a href=#分析问题的能力 class="header-mark headerLink">分析问题的能力</a></h3><p>面对一个新问题，要有去分析的能力，知道该从哪里入手分析，知道分析的方法，能够评估自己的方法。</p><p>能够提出自己的想法，即使最终无法完美的解决问题，但这个过程是非常重要的。</p>]]></description></item><item><title>青春梦飞扬</title><link>https://zu1k.com/posts/thinking/youthful-dreams-soar/</link><pubDate>Mon, 18 May 2020 22:30:00 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/youthful-dreams-soar/</guid><description><![CDATA[
        <p>初中的时候有时熬夜到九点十点都没睡觉，闲着没事找广播听，发现了这样一个神奇的节目，名字叫做青春梦飞扬，主持人叫大脑门管鑫。</p><p>从此几乎每天都要准时听青春梦飞扬，节目里面的东西都比较有趣，大部分是实事的一些交流和互动，还会有一些有趣的小知识。</p><p>到了高中，由于住校和晚自习的存在就没有机会听那个时间段的广播了</p><p>前段时间小米更新增加了一个在线收音机的软件，那天我没睡着就打开收音机</p><p>找青春梦飞扬这个节目，最后却没找到。</p><p>上网搜索了一番，包括广播台的网站和节目的百度贴吧，发现这个节目几年前也就是我上高三的时候貌似，停止了。</p><p>大脑门管鑫还发了一段录音，告别词。还有一个小活动，当初结束时的小活动，找到身边的听友，一起回忆一下节目几年来的有趣的难忘的经历。</p><p>突然很伤感，天下的宴席终究有结束的那一天，而越是温馨、令人愉悦的东西，结束的时候越令人难以割舍，即使已经过去好多年，回想起来仍仿佛就发生在昨日，那是陪伴我好一段安静夜晚的美妙时光。</p>]]></description></item><item><title>资本、金融、经济</title><link>https://zu1k.com/posts/thinking/capital-financial-economic/</link><pubDate>Mon, 16 Dec 2019 18:40:43 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/thinking/capital-financial-economic/</guid><description><![CDATA[
        <p>去年的某个周末，我偶然在腾讯视频看到了一部连续短剧《东方华尔街》，刚看第一集就被深深吸引住了。《东方华尔街》讲述的是一队隐于世的金融雇佣兵，狙击政经界传奇人物，并搅动整个金融市场的复仇故事。故事吸引我的不仅仅是故事中的师徒情谊、恩怨之争、社会责任，更有整个连续短剧中贯穿的金融内容。这队人通过金融、传媒、政治等各方面手段操纵整个金融市场，继而决定整个金融社会的走势，这让我对金融相关知识愈发感兴趣起来。</p><p>在看完这个连续短剧之后，我又去学校图书馆查找相关书籍，书架上书太多了，太专业的看不懂，自己还是对金融相关发展历史和故事比较感兴趣，所以最终决定看《货币战争》。
后续因为期末考试书没有看完，这段故事就告一段落。</p><p>这段时间，正在kindle上阅读刚下载的几本书《坏血：一个硅谷巨头的秘密与谎言》、《金钱永不眠：资本世界的暗流涌动和金融逻辑》，书还没看完，但却勾起了我对金融学、经济学等相关知识更加深入了解的念头。</p><p>这段时间是期末考试月，越到考试月，这个人在无聊的情况下想的事情越多，加上今年发生的种种事情、各种乱七八糟颠覆我世界观的新闻，我对一些事物的概念越发模糊起来。</p><ul><li>什么是国家？</li><li>什么是政治？</li><li>什么是社会？</li><li>什么是经济？</li><li>什么是金融？</li><li>什么是资本？</li><li>等等。。。</li></ul><p>这些概念最初接触应该是初高中的政治课上，但是学习的也不够深入，或者说学的东西太模糊了，感觉跟现实世界的一些东西有些偏差，在生活中越发发现有些东西是需要自己去体悟自己去领会的。</p><p>一个人的世界观、金钱观、人生观、、、等等各种观，我们从小接受的教育，都是正确的吗？或者说没有什么正确的东西，只有适合这个时代、适合这个社会、适合当前的一些东西。</p><p>自己出生于农村家庭，也没有去过国外，就连出省也仅有两次，对这个世界的认识还是太浅了。在网络上看到一些事情，在一些平台上看到国外从未了解过的国家的一些事情，发现自己从小到大所受的教育有很多东西已经不适合这个时代了，也不能说过时，感觉上就是太理想化了，或者说之前想的太简单了，很多事情不能说“不是这样”，而是“并不仅仅是我想的这样”。</p><p>好啦，不说了，貌似跑题了，也没关系啦，拜拜，读到这里的陌生人。</p><p>假期要看的</p><ul><li>连续剧<ul><li>《富翁》</li><li>《亿万》</li></ul></li><li>电影<ul><li>《华尔街》</li><li>《华尔街2：金钱永不眠》</li></ul></li></ul><hr><blockquote><p><strong>迁移丢失的评论</strong><br>Scarlett 2020年3月1日 上午1:06<br>货币战争并不建议阅读，一个小技巧是阅读前先看豆瓣的评分书评。<br>另外推荐书:</p><ul><li>《灭火》</li><li>《聪明的投资者》</li><li>《随机漫步的傻瓜》</li><li>《投资学精要》</li><li>《金融学》</li><li>《漫步华尔街》</li><li>《伟大的博弈》</li><li>《战胜华尔街》</li><li>《逆向思考的艺术》</li><li>《格雷厄姆投资指南》</li><li>《投资最重要的事》</li></ul></blockquote>]]></description></item></channel></rss>