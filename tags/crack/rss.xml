<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Crack - 标签 - zu1k</title><link>https://zu1k.com/tags/crack/</link><description/><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 18 Jun 2020 09:06:25 +0800</lastBuildDate><atom:link href="https://zu1k.com/tags/crack/" rel="self" type="application/rss+xml"/><item><title>xray社区高级版破解</title><link>https://zu1k.com/posts/security/reverse/xray-cracker/</link><pubDate>Thu, 18 Jun 2020 09:06:25 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/security/reverse/xray-cracker/</guid><description><![CDATA[
        <blockquote><p>首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具<br>俗话说：没有人破解的工具不是好工具<br>根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版<br>包括但不限于： IDA \ JEB \ BurpSuite \ Vmware</p></blockquote><p>前几天长亭官方有个活动，可以领 2 个月的 xray 社区高级版证书，正好趁这个机会逆向分析了一下 xray 的证书算法，写了一个证书生成器</p><p>因为 xray 证书用到了 rsa 算法，所以需要替换 xray 程序中的公钥，将该功能也集成在工具中了</p><h2 id=工具使用><a href=#工具使用 class="header-mark headerLink">工具使用</a></h2><h3 id=查看帮助><a href=#查看帮助 class="header-mark headerLink">查看帮助</a></h3><p>使用 <code>-h</code> 查看帮助</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-shell data-lang=shell><span class=line><span class=cl>PS &gt; .<span class=se>\x</span>ray-cracker -h
</span></span><span class=line><span class=cl>破解xray高级版证书，使用 -h 参数查看使用帮助
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>Usage of xray-cracker:
</span></span><span class=line><span class=cl>  -c string
</span></span><span class=line><span class=cl>        替换xray程序内置公钥，需要指定xray程序文件路径
</span></span><span class=line><span class=cl>  -g string
</span></span><span class=line><span class=cl>        生成一个永久license，需要指定用户名
</span></span><span class=line><span class=cl>  -p string
</span></span><span class=line><span class=cl>        解析官方证书，需要指定证书路径
</span></span></code></pre></td></tr></table></div></div></div><h3 id=生成证书><a href=#生成证书 class="header-mark headerLink">生成证书</a></h3><p>使用 <code>-g username</code> 生成永久证书</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-shell data-lang=shell><span class=line><span class=cl>PS &gt; .<span class=se>\x</span>ray-cracker -g <span class=s2>&#34;我叫啥&#34;</span>
</span></span><span class=line><span class=cl>破解xray高级版证书，使用 -h 参数查看使用帮助
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>证书已写入文件：xray-license.lic
</span></span></code></pre></td></tr></table></div></div></div><h3 id=破解-xray><a href=#破解-xray class="header-mark headerLink">破解 xray</a></h3><p>使用 <code>-c path-to-xray</code> 修改 xray 内置公钥</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-shell data-lang=shell><span class=line><span class=cl>PS &gt; .<span class=se>\x</span>ray-cracker -c .<span class=se>\x</span>ray_windows_amd64.exe
</span></span><span class=line><span class=cl>破解xray高级版证书，使用 -h 参数查看使用帮助
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>public key index: <span class=m>16741321</span>
</span></span><span class=line><span class=cl>文件写入成功： .<span class=se>\x</span>ray_windows_amd64.exe
</span></span></code></pre></td></tr></table></div></div></div><blockquote><p>工具虽然是 windows 平台下运行，但是照样可以破解其他平台 xray<br>目前 xray 最新版是 1.0.0，现在全平台全版本通杀</p></blockquote><h2 id=破解效果><a href=#破解效果 class="header-mark headerLink">破解效果</a></h2><p>使用修改版 xray 和永久证书后，效果如下</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span><span class=lnt>11
</span><span class=lnt>12
</span><span class=lnt>13
</span><span class=lnt>14
</span><span class=lnt>15
</span><span class=lnt>16
</span><span class=lnt>17
</span><span class=lnt>18
</span><span class=lnt>19
</span><span class=lnt>20
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-shell data-lang=shell><span class=line><span class=cl>PS &gt; .<span class=se>\x</span>ray_windows_amd64.exe version
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl> __   __  _____              __     __
</span></span><span class=line><span class=cl> <span class=se>\ \ </span>/ / <span class=p>|</span>  __ <span class=se>\ </span>     /<span class=se>\ </span>    <span class=se>\ \ </span>  / /
</span></span><span class=line><span class=cl>  <span class=se>\ </span>V /  <span class=p>|</span> <span class=p>|</span>__<span class=o>)</span> <span class=p>|</span>    /  <span class=se>\ </span>    <span class=se>\ \_</span>/ /
</span></span><span class=line><span class=cl>   &gt; &lt;   <span class=p>|</span>  _  /    / /<span class=se>\ \ </span>    <span class=se>\ </span>  /
</span></span><span class=line><span class=cl>  / . <span class=se>\ </span> <span class=p>|</span> <span class=p>|</span> <span class=se>\ \ </span>  / ____ <span class=se>\ </span>    <span class=p>|</span> <span class=p>|</span>
</span></span><span class=line><span class=cl> /_/ <span class=se>\_\ </span><span class=p>|</span>_<span class=p>|</span>  <span class=se>\_\ </span>/_/    <span class=se>\_\ </span>   <span class=p>|</span>_<span class=p>|</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>Version: 1.0.0/62161168/COMMUNITY-ADVANCED
</span></span><span class=line><span class=cl>Licensed to 我叫啥, license is valid <span class=k>until</span> 2099-09-09 08:00:00
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=o>[</span>xray 1.0.0/62161168<span class=o>]</span>
</span></span><span class=line><span class=cl>Build: <span class=o>[</span>2020-06-13<span class=o>]</span> <span class=o>[</span>windows/amd64<span class=o>]</span> <span class=o>[</span>RELEASE/COMMUNITY-ADVANCED<span class=o>]</span>
</span></span><span class=line><span class=cl>Compiler Version: go version go1.14.1 linux/amd64
</span></span><span class=line><span class=cl>License ID: <span class=m>00000000000000000000000000000000</span>
</span></span><span class=line><span class=cl>User Name: 我叫啥/00000000000000000000000000000000
</span></span><span class=line><span class=cl>Not Valid Before: 2020-06-12 00:00:00
</span></span><span class=line><span class=cl>Not Valid After: 2099-09-09 08:00:00
</span></span></code></pre></td></tr></table></div></div></div><h2 id=部分细节><a href=#部分细节 class="header-mark headerLink">部分细节</a></h2><blockquote><p>距离博文发布已经过了快一个月了，补充一点点细节信息，希望能够帮助到部分研究学习的同学</p></blockquote><p>这里只给出使用的关键函数和关键流程，一些重要参数细节需要自己探索，可以动态单步调试获得</p><h3 id=aes-解密><a href=#aes-解密 class="header-mark headerLink">AES 解密</a></h3><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt> 1
</span><span class=lnt> 2
</span><span class=lnt> 3
</span><span class=lnt> 4
</span><span class=lnt> 5
</span><span class=lnt> 6
</span><span class=lnt> 7
</span><span class=lnt> 8
</span><span class=lnt> 9
</span><span class=lnt>10
</span><span class=lnt>11
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-go data-lang=go><span class=line><span class=cl><span class=nx>decode_data</span><span class=p>,</span> <span class=nx>err</span> <span class=o>:=</span> <span class=nx>base64</span><span class=p>.</span><span class=nx>StdEncoding</span><span class=p>.</span><span class=nf>DecodeString</span><span class=p>(</span><span class=nx>licenseString</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=nx>err</span> <span class=o>!=</span> <span class=kc>nil</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nb>panic</span><span class=p>(</span><span class=nx>err</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=nx>aesDecData</span><span class=p>,</span> <span class=nx>err</span> <span class=o>:=</span> <span class=nf>AesCBCDecryptAndUnPad</span><span class=p>(</span><span class=nx>decode_data</span><span class=p>[</span><span class=mi>17</span><span class=p>:])</span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=nx>err</span> <span class=o>!=</span> <span class=kc>nil</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nb>panic</span><span class=p>(</span><span class=nx>err</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=nx>licensePlainJsonBytes</span> <span class=o>:=</span> <span class=nx>aesDecData</span><span class=p>[</span><span class=mh>0x102</span><span class=p>:]</span>
</span></span></code></pre></td></tr></table></div></div></div><h3 id=rsa-签名验证><a href=#rsa-签名验证 class="header-mark headerLink">RSA 签名验证</a></h3><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-go data-lang=go><span class=line><span class=cl><span class=nx>sum</span> <span class=o>:=</span> <span class=nx>sha256</span><span class=p>.</span><span class=nf>Sum256</span><span class=p>(</span><span class=nx>licensePlainJsonBytes</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=nx>err</span> <span class=p>=</span> <span class=nx>rsa</span><span class=p>.</span><span class=nf>VerifyPSS</span><span class=p>(</span><span class=nx>pubKey</span><span class=p>,</span> <span class=nx>crypto</span><span class=p>.</span><span class=nx>SHA256</span><span class=p>,</span> <span class=nx>sum</span><span class=p>[:],</span> <span class=nx>aesDecData</span><span class=p>[</span><span class=mi>2</span><span class=p>:</span><span class=mh>0x102</span><span class=p>],</span> <span class=kc>nil</span><span class=p>)</span>
</span></span></code></pre></td></tr></table></div></div></div><h2 id=2020年8月27日-补充><a href=#2020年8月27日-补充 class="header-mark headerLink">2020年8月27日 补充</a></h2><p>xray 官方在 1.3.0 版本中更换了授权验证机制，所以破解仅支持到 1.2.0 版本，本文使用代码现在开源： <a href=https://github.com/zu1k/xray-crack target=_blank rel="noopener noreffer" class=post-link>https://github.com/zu1k/xray-crack</a></p><h2 id=2020年9月30日-补充><a href=#2020年9月30日-补充 class="header-mark headerLink">2020年9月30日 补充</a></h2><p>前几天有大佬私发我一个 License，我就又对证书算法研究了一下</p><p>相关代码也已经更新到 github 了</p><h3 id=证书生成><a href=#证书生成 class="header-mark headerLink">证书生成</a></h3><p>证书生成验证整体的思路没有大的改动，还是先 AES 解密，然后 RSA 签名验证，只是前后增加了两处简单的变换</p><p>在解密前有一个简单的交换，开始和最后的两个两个没有参与运算（开始第一个字节是证书版本号）</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span><span class=lnt>7
</span><span class=lnt>8
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-golang data-lang=golang><span class=line><span class=cl><span class=nx>right</span> <span class=o>:=</span> <span class=nb>len</span><span class=p>(</span><span class=nx>base64DecodeData</span><span class=p>)</span> <span class=o>-</span> <span class=mi>1</span>
</span></span><span class=line><span class=cl><span class=k>for</span> <span class=nx>l</span> <span class=o>:=</span> <span class=mi>1</span><span class=p>;</span> <span class=nx>l</span> <span class=p>&lt;</span> <span class=nx>right</span><span class=p>;</span> <span class=nx>l</span><span class=o>++</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nx>r</span> <span class=o>:=</span> <span class=nx>right</span> <span class=o>-</span> <span class=nx>l</span>
</span></span><span class=line><span class=cl>  <span class=k>if</span> <span class=nx>l</span> <span class=o>&gt;=</span> <span class=nx>r</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=k>break</span>
</span></span><span class=line><span class=cl>  <span class=p>}</span>
</span></span><span class=line><span class=cl>  <span class=nx>base64DecodeData</span><span class=p>[</span><span class=nx>l</span><span class=p>],</span> <span class=nx>base64DecodeData</span><span class=p>[</span><span class=nx>r</span><span class=p>]</span> <span class=p>=</span> <span class=nx>base64DecodeData</span><span class=p>[</span><span class=nx>r</span><span class=p>],</span> <span class=nx>base64DecodeData</span><span class=p>[</span><span class=nx>l</span><span class=p>]</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>然后进行 aes 解密，密钥是写死的，IV 是附加在证书里面的，刚刚的变换结束后，除去第一个字节是版本号，紧接着的 16 个字节是 AES 的 IV</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-golang data-lang=golang><span class=line><span class=cl><span class=nx>aesDecData</span><span class=p>,</span> <span class=nx>err</span> <span class=o>:=</span> <span class=nf>Decrypt</span><span class=p>(</span><span class=nx>base64DecodeData</span><span class=p>[</span><span class=mi>17</span><span class=p>:],</span> <span class=nx>base64DecodeData</span><span class=p>[</span><span class=mi>1</span><span class=p>:</span><span class=mi>17</span><span class=p>])</span>
</span></span></code></pre></td></tr></table></div></div></div><p>AES 解密后就会遇到另一个变换，是简单的异或处理</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-golang data-lang=golang><span class=line><span class=cl><span class=k>for</span> <span class=nx>i</span> <span class=o>:=</span> <span class=mi>0</span><span class=p>;</span> <span class=nx>i</span> <span class=p>&lt;</span> <span class=nb>len</span><span class=p>(</span><span class=nx>aesDecData</span><span class=p>);</span> <span class=nx>i</span><span class=o>++</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nx>aesDecData</span><span class=p>[</span><span class=nx>i</span><span class=p>]</span> <span class=p>=</span> <span class=nx>aesDecData</span><span class=p>[</span><span class=nx>i</span><span class=p>]</span> <span class=p>^</span> <span class=mh>0x44</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>然后后面的部分就跟之前一样了</p><h3 id=公钥><a href=#公钥 class="header-mark headerLink">公钥</a></h3><p>在新的版本中，RSA 的公钥被加密处理了，在运行的时候解密，这样做可以防止我们通过简单的公钥替换通杀所有的版本和平台</p><p>通过逆向发现，解密函数有二百多个局部变量，先是变量之间互相交换，然后两两进行加、减、异或等操作来还原公钥信息</p><p>我推测是用程序生成的代码，然后那生成的代码编译的，这样可以在每一次编译的时候重新生成一下代码，增加我们破解的时间</p><p>从这一方面出发，我只能变换一下思路，不能去硬刚</p><p>Golang 中 RSA 签名验证代码如下：</p><div class=highlight><div class=chroma><div class=table-wrapper><table class=lntable><tr><td class=lntd><pre tabindex=0 class=chroma><code><span class=lnt>1
</span><span class=lnt>2
</span><span class=lnt>3
</span><span class=lnt>4
</span><span class=lnt>5
</span><span class=lnt>6
</span></code></pre></td><td class=lntd><pre tabindex=0 class=chroma><code class=language-golang data-lang=golang><span class=line><span class=cl><span class=nx>err</span> <span class=o>:=</span> <span class=nx>rsa</span><span class=p>.</span><span class=nf>VerifyPSS</span><span class=p>(</span><span class=nx>pubKey</span><span class=p>,</span> <span class=nx>crypto</span><span class=p>.</span><span class=nx>SHA256</span><span class=p>,</span> <span class=nx>sum</span><span class=p>[:],</span> <span class=nx>aesDecData</span><span class=p>[</span><span class=mi>2</span><span class=p>:</span><span class=mh>0x102</span><span class=p>],</span> <span class=kc>nil</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=nx>err</span> <span class=o>!=</span> <span class=kc>nil</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nx>fmt</span><span class=p>.</span><span class=nf>Println</span><span class=p>(</span><span class=s>&#34;签名验证 失败&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>}</span> <span class=k>else</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=nx>fmt</span><span class=p>.</span><span class=nf>Println</span><span class=p>(</span><span class=s>&#34;签名验证 成功&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></td></tr></table></div></div></div><p>很明显，是通过判断返回值是否为空来确定签名验证是否成功的，在汇编中一般为<code>test eax,eax</code>，然后<code>setnz</code>或者<code>setz</code>，所以我可以修改这里</p><p>但是这种方法我只能手工修改，目前没有实现用程序来自动化</p><blockquote><p>主要是无法确定应该修改哪一个地方，因为出现了不止一次，一个特征是调用 VerifyPSS 的那个 Call，可以尝试自己解析 pclntab 段，从中还原符号表找到这个验证函数的入口，然后找搜索关键 Call，再在这个 call 后面两三个汇编处找 setnz 或者 setz 进行修改</p></blockquote><h2 id=2020年10月4日-补充><a href=#2020年10月4日-补充 class="header-mark headerLink">2020年10月4日 补充</a></h2><p>感谢 @Lz1y 大佬在 PR#3 中提供的思路，现在已能够自动patch非arm版本的xray二进制了</p><h2 id=2020年10月5日-补充><a href=#2020年10月5日-补充 class="header-mark headerLink">2020年10月5日 补充</a></h2><p>上个版本直接全部进行替换，会导致xray有些功能出现错误，这里进行了修复</p><p>增加了 arm 版的自动patch，现在能够全版本破解了</p><h2 id=2020年11月6号晚-补充><a href=#2020年11月6号晚-补充 class="header-mark headerLink">2020年11月6号晚 补充</a></h2><p>刚刚发现又发新版了，发现已有的程序无法完成patch了，分析发现新的1.4虽然没有修改证书生成算法，但是针对我上面的patch进行了检查</p><p>我前面是对签名验证返回值进行修改，如果签名验证失败就改成验证成功。1.4增加了一次签名验证，验证的内容是错误的，必然会验证失败，如果patch还是修改为验证成功就落入了陷阱</p><p><img src=/posts/security/reverse/xray-cracker/20201106_huc9cc318fe37b1a6f8153e1568523954b_87756_1024x574_resize_q75_h2_box_3.webp alt=/posts/security/reverse/xray-cracker/20201106_huc9cc318fe37b1a6f8153e1568523954b_87756_1024x574_resize_q75_h2_box_3.webp title=1.4 height=574 width=1024 loading=lazy></p><p>思路是对的，但是问题不是在这里，我并没有对RSAVerify本身进行patch，而是patch函数返回后对结果的判断，并且只修改了一处判断，并没有对所有判断都进行修改，所以即使有检查也没有造成影响</p><p>新版本因为换用了Golang 1.14，是go的版本差异导致的patch问题（汇编不同了），目前完成了amd64平台的自动patch，其他的平台等大佬PR</p><p><img src=/posts/security/reverse/xray-cracker/ok_huf65e638799159df80c6040763bf4d978_123502_1216x465_resize_q75_h2_box_3.webp alt=/posts/security/reverse/xray-cracker/ok_huf65e638799159df80c6040763bf4d978_123502_1216x465_resize_q75_h2_box_3.webp title=ok height=465 width=1216 loading=lazy></p><h2 id=2020年11月11日-补充><a href=#2020年11月11日-补充 class="header-mark headerLink">2020年11月11日 补充</a></h2><p>感谢 <a href=https://github.com/nszy007 target=_blank rel="noopener noreffer" class=post-link>@nszy007</a> 提供<a href=https://github.com/zu1k/comment/issues/4#issuecomment-725222928 target=_blank rel="noopener noreffer" class=post-link>剩余平台的patch</a></p><h2 id=2020年11月11日-下午16点-补充><a href=#2020年11月11日-下午16点-补充 class="header-mark headerLink">2020年11月11日 下午16点 补充</a></h2><p>收到 Chaitin 人员的要求，已删除相关源代码</p><h2 id=2020年11月18日-补充><a href=#2020年11月18日-补充 class="header-mark headerLink">2020年11月18日 补充</a></h2><p><img src=/posts/security/reverse/xray-cracker/1.4.5_hu1366f82c8d4391b8d20942557fd7f48a_56051_987x201_resize_q75_h2_box_3.webp alt=/posts/security/reverse/xray-cracker/1.4.5_hu1366f82c8d4391b8d20942557fd7f48a_56051_987x201_resize_q75_h2_box_3.webp title=1.4.5 height=201 width=987 loading=lazy></p><p>思路不变，不要再给我发邮件要破解版和代码了</p><h2 id=2020年11月24日-补充><a href=#2020年11月24日-补充 class="header-mark headerLink">2020年11月24日 补充</a></h2><p><img src=/posts/security/reverse/xray-cracker/1.5.0_hu735b2544b656d9c4b3ea4d0571fdd8f4_20842_543x753_resize_q75_h2_box_3.webp alt=/posts/security/reverse/xray-cracker/1.5.0_hu735b2544b656d9c4b3ea4d0571fdd8f4_20842_543x753_resize_q75_h2_box_3.webp title=1.5.0 height=753 width=543 loading=lazy></p><p>证书算法没有任何修改</p><div class="details admonition note open"><div class="details-summary admonition-title"><i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i></div><div class=details-content><div class=admonition-content><p>前段时间长亭的小姐姐跟我说有人通过破解xray盈利，那时候我还不太信，真有人花钱买破解版？</p><p>前几天算是见到了
<img src=/posts/security/reverse/xray-cracker/never_hu83006c21dd82aefe2604fc852876e244_51988_1081x576_resize_q75_h2_box_3.webp alt=/posts/security/reverse/xray-cracker/never_hu83006c21dd82aefe2604fc852876e244_51988_1081x576_resize_q75_h2_box_3.webp title=mail height=576 width=1081 loading=lazy></p><p>希望不要再有人联系我要（买）破解代码和工具了，我是不会干这种事的</p></div></div></div>]]></description></item><item><title>逆向破解学校在线考试客户端</title><link>https://zu1k.com/posts/security/reverse/crack-sdu-online-exam-software/</link><pubDate>Fri, 01 May 2020 21:44:54 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/security/reverse/crack-sdu-online-exam-software/</guid><description><![CDATA[
        <h2 id=前言><a href=#前言 class="header-mark headerLink">前言</a></h2><p>近期，学校开始测试线上考试系统，据说十分流氓，开搞！</p><p>从大一学弟那里拿到了相关程序和说明文档，经过学弟的使用体验，程序开始运行会自动杀死QQ、微信等程序，隐藏并屏蔽任务栏和开始菜单，强制全屏并屏蔽一些常用的快捷键包括窗口切换等。</p><h2 id=开搞><a href=#开搞 class="header-mark headerLink">开搞</a></h2><h3 id=基本信息><a href=#基本信息 class="header-mark headerLink">基本信息</a></h3><p>在虚拟机里安装程序后，先观察一下安装目录结构和里面的文件</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/1_hu25a8c530758b57706e2e87126fbacdb6_79325_791x726_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/1_hu25a8c530758b57706e2e87126fbacdb6_79325_791x726_resize_q75_h2_box_3.webp title=安装目录结构 height=726 width=791 loading=lazy></p><p>仔细查看了各个文件夹下的内容，最终得出结论，是个QT编写的套壳浏览器，用的 QtWebEngine</p><p>查看主程序的信息，32位未加壳C++程序，本身非常小，只有不到1M，大部分功能应该都是调库实现的</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/2_huaf7e2df93de3782a27bf3f7ad0c6a1ee_236641_573x625_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/2_huaf7e2df93de3782a27bf3f7ad0c6a1ee_236641_573x625_resize_q75_h2_box_3.webp title=查看主程序PE信息 height=625 width=573 loading=lazy></p><p>下面开始逆向，拖入IDA 32位，自动定位到入口函数start，从执行流图中可以看到程序本身结构非常简单</p><h3 id=正着走><a href=#正着走 class="header-mark headerLink">正着走</a></h3><p>下面从start开始分析</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/3_hu4b39b258c7524202b8cd1416e38579e4_3815_671x132_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/3_hu4b39b258c7524202b8cd1416e38579e4_3815_671x132_resize_q75_h2_box_3.webp title=start函数汇编 height=132 width=671 loading=lazy></p><p>可以看到一开始start函数的栈指针分析就出问题了，但是start本身的调用非常简单，不妨来看一下
首先是 第一个call指令，进入这个函数</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/4_hu11170951e1769b8607aa2379eeb4c945_13042_695x397_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/4_hu11170951e1769b8607aa2379eeb4c945_13042_695x397_resize_q75_h2_box_3.webp title=start第一个call height=397 width=695 loading=lazy></p><p>发现是 security_cookie检查，没有什么实际作用</p><p>第二个是个无条件跳转 jmp，进去看一下</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/5_hu5fa83e71bb7eb2aed00de67a7fc10292_37880_936x592_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/5_hu5fa83e71bb7eb2aed00de67a7fc10292_37880_936x592_resize_q75_h2_box_3.webp title=start第二个jmp height=592 width=936 loading=lazy></p><p>可以看到这一段东西比较多，特别是各种不知道什么作用的call非常多，并且自动反编译出问题了，这个反编译问题应该是比较好解决的，我没有深究</p><p>简单看了一下调用的call，越深入越复杂，到这里分析不下去了，东西有点多，从其他方面入手</p><h3 id=去除杀进程><a href=#去除杀进程 class="header-mark headerLink">去除杀进程</a></h3><p>先来看一下字符串，很幸运字符串没有进行加密，因为我们知道程序会杀死qq，不如直接来搜索关键字QQ</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/6_hu41fa89c3b982affc8224b6ae274fe835_18325_950x144_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/6_hu41fa89c3b982affc8224b6ae274fe835_18325_950x144_resize_q75_h2_box_3.webp title=string搜索qq height=144 width=950 loading=lazy></p><p>看一下交叉引用</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/7_hu0a9924ecaba783ef1b6e8c38ed0e49d0_47320_973x363_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/7_hu0a9924ecaba783ef1b6e8c38ed0e49d0_47320_973x363_resize_q75_h2_box_3.webp title=交叉引用 height=363 width=973 loading=lazy></p><p>只有一个函数调用了它，先进入看看这个函数，关键部分如下</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/8_hua685867cbc444bfc8d9186a9fb49343e_11032_605x296_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/8_hua685867cbc444bfc8d9186a9fb49343e_11032_605x296_resize_q75_h2_box_3.webp title=引用该处的函数 height=296 width=605 loading=lazy></p><p>这就比较清楚了，程序是通过QProcess调用taskkill命令来强制来杀死这些程序的，会被杀死的程序包括实时聊天软件qq、微信，远程协助软件teamviwer、向日葵远程控制。</p><p>在这里我们需要去除这个杀死进程的机制，直接将执行的命令字符串给清空就行</p><h3 id=去除隐藏任务栏><a href=#去除隐藏任务栏 class="header-mark headerLink">去除隐藏任务栏</a></h3><p>同时这段命令所在的这个函数在前面还有一堆对QtWebEngine的初始化</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/9_hu89cae707ca44a4196b4e0a6476a85ebd_31771_783x624_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/9_hu89cae707ca44a4196b4e0a6476a85ebd_31771_783x624_resize_q75_h2_box_3.webp title=QtWebEngine的初始化 height=624 width=783 loading=lazy></p><p>这个函数后面的部分有点意思，看到了一些字符串不清楚什么意思</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/10_hu8d59a028ab85f7efa893bb6309ec88a5_4794_508x155_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/10_hu8d59a028ab85f7efa893bb6309ec88a5_4794_508x155_resize_q75_h2_box_3.webp title=有意思的代码 height=155 width=508 loading=lazy></p><p>我个人对tray比较敏感，因为做过任务栏图标程序的开发，知道任务栏的英文是tray</p><p>这里对 Shell_TrayWhd 进行搜索</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/11_hu94116cbb480ac9baba841276713bd854_49834_943x383_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/11_hu94116cbb480ac9baba841276713bd854_49834_943x383_resize_q75_h2_box_3.webp title=系统特殊窗口句柄 height=383 width=943 loading=lazy></p><p>发现windows系统有一些特殊的窗口句柄，而这个正式任务栏窗口句柄</p><p>一开始我还对这个考试程序怎么隐藏任务栏感兴趣，现在都一目了然了，先通过系统函数获得句柄，然后调用ShowWindow将窗口设置为不显示</p><p>这里的ProgMan是任务管理器，所以说这段代码同时屏蔽了任务栏、开始菜单和任务管理器</p><p>我们需要去除这种屏蔽机制，这也非常简单，来看汇编</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/12_hud65c80aa3dfda43b19226ea198925b3b_12375_713x352_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/12_hud65c80aa3dfda43b19226ea198925b3b_12375_713x352_resize_q75_h2_box_3.webp title=汇编 height=352 width=713 loading=lazy></p><p>发现在调用showwindow前需要将参数 True or False push入栈，也就是 call ShowWindow前面的push 0，只需要修改这几处汇编即可</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/13_huc572c90f9c5f259fb5a39233fa1a218d_35740_506x532_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/13_huc572c90f9c5f259fb5a39233fa1a218d_35740_506x532_resize_q75_h2_box_3.webp title=IDA中进行patch height=532 width=506 loading=lazy></p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/14_hu62f4704e1edfdcff045cc107f5d1e9e2_18444_919x147_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/14_hu62f4704e1edfdcff045cc107f5d1e9e2_18444_919x147_resize_q75_h2_box_3.webp title=1 height=147 width=919 loading=lazy></p><p>将push 0修改为push 1即可去除他的屏蔽(后面的分析知道 push 5 比较好)</p><h3 id=去除强制全屏><a href=#去除强制全屏 class="header-mark headerLink">去除强制全屏</a></h3><p>下面我们来去除一下窗口全屏，虽然有任务栏可以用了，但是全屏会挡住，不好用</p><p>还是刚刚那个函数，通过不断查交叉应用，最后定位到start第二次jmp后的代码中</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/15_hu74c45fba88c2c8aaff2ab37e3737f2bc_11896_712x369_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/15_hu74c45fba88c2c8aaff2ab37e3737f2bc_11896_712x369_resize_q75_h2_box_3.webp title=回到开始 height=369 width=712 loading=lazy></p><p>通过前面对前前后后的call和跳转的分析，可以知道没有啥具体内容，所以还得从刚刚的那个函数入手</p><p>发现后面有一个call</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/16_hua92a12730a633399d5909646f6b6a228_5253_521x191_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/16_hua92a12730a633399d5909646f6b6a228_5253_521x191_resize_q75_h2_box_3.webp title=后面的一个call height=191 width=521 loading=lazy></p><p>进入后</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/17_huc8fa69fd22f174e19e87c36ab2629b59_19877_687x524_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/17_huc8fa69fd22f174e19e87c36ab2629b59_19877_687x524_resize_q75_h2_box_3.webp title=恢复任务栏 height=524 width=687 loading=lazy></p><p>发现这个函数是要将之前设置的任务栏隐藏等给还原，所以这里应该是要退出了，重要的内容还是在杀死qq的那些操作和这个函数中间的位置</p><p>仔细分析后，找到了关键的地方</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/18_hu86dc051b5eeffb8a6d43231571b7420d_8565_566x230_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/18_hu86dc051b5eeffb8a6d43231571b7420d_8565_566x230_resize_q75_h2_box_3.webp title=关键call height=230 width=566 loading=lazy></p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/19_hu74a2f69b095036587e01cbd96da18b1f_16513_766x398_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/19_hu74a2f69b095036587e01cbd96da18b1f_16513_766x398_resize_q75_h2_box_3.webp title=resize height=398 width=766 loading=lazy></p><p>这和函数在最后面会获取主屏幕的长和宽，然后调用resize函数设置窗口大小，从而使窗口占满屏幕</p><p>这里看一下汇编</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/20_hu9749bb6adc7c1ffbe60f9842912aca39_8053_795x197_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/20_hu9749bb6adc7c1ffbe60f9842912aca39_8053_795x197_resize_q75_h2_box_3.webp title=汇编 height=197 width=795 loading=lazy></p><p>其实还是比较难搞的，东西比较紧凑，没法插入太多的汇编，又不想进行大改增加一个call，那就只把开始菜单的地方留出来吧，也就是只修改窗口的高</p><p>因为需要先把高入栈，所以前面的宽先存到 esi，我们先不要动这个，先把高减一个数然后push进去再push esi，修改之后如下</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/21_hu9c39d8bd93f6c6135c591e187ef3e365_7736_766x198_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/21_hu9c39d8bd93f6c6135c591e187ef3e365_7736_766x198_resize_q75_h2_box_3.webp title=修改后 height=198 width=766 loading=lazy></p><p>这样显示的窗口就不会挡住任务栏，我们就可以切换窗口了</p><h3 id=恢复窗口和按钮><a href=#恢复窗口和按钮 class="header-mark headerLink">恢复窗口和按钮</a></h3><p>后来又想，如果可以手动修改窗口大小就好了，再有个放大、缩小的按钮并且能移动位置就更爽了，那就接着搞</p><p>之前做过qt的开发，知道有一个窗口属性是可以隐藏系统窗口，只显示里面的内容从而使窗口无法修改大小和移动位置</p><p>搜索一番后发现使用的使 setWindowFlags 函数来实现的，那就从imports里面找一下吧</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/22_hu76da69e78eda643be54e22201dca2479_22997_722x197_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/22_hu76da69e78eda643be54e22201dca2479_22997_722x197_resize_q75_h2_box_3.webp title=imports里找修改窗口属性的函数 height=197 width=722 loading=lazy></p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/23_hua79c4ef30194639d489417a6df8f2089_54415_1203x243_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/23_hua79c4ef30194639d489417a6df8f2089_54415_1203x243_resize_q75_h2_box_3.webp title=函数的交叉引用 height=243 width=1203 loading=lazy></p><p>看交叉引用然后一个一个进去看，最后定位到一个函数，我给他起名 initWindowsComponent，前面的分析我也都相应的进行改名了，分析起来方便记忆</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/24_hue38a12f7f86e7ab92367e4a87df35caa_13898_633x488_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/24_hue38a12f7f86e7ab92367e4a87df35caa_13898_633x488_resize_q75_h2_box_3.webp title=引用的函数 height=488 width=633 loading=lazy></p><p>我这个起名应该是非常贴切了，的确是往窗口里面添加各种菜单按钮组件</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/25_hucac295d42b1f5d8aa2fe5c5ed1f6c7ab_5196_568x160_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/25_hucac295d42b1f5d8aa2fe5c5ed1f6c7ab_5196_568x160_resize_q75_h2_box_3.webp title=调用的地方 height=160 width=568 loading=lazy></p><p>在后面找到了setWindowFlags调用，但是因为qt里面用的是枚举类型，编译后都变成数字了，只能去看qt的源码</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/26_hucca8f3950aead47907e72a59700ef743_2899_462x82_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/26_hucca8f3950aead47907e72a59700ef743_2899_462x82_resize_q75_h2_box_3.webp title=qt源码 height=82 width=462 loading=lazy></p><p>传入的枚举类型使WindowsFlags类型，跟进去后发现又是一个WindowType类型</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/27_hubace17bc2bbaff64b4f85de799106b3e_1905_412x47_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/27_hubace17bc2bbaff64b4f85de799106b3e_1905_412x47_resize_q75_h2_box_3.webp title=跟进qt源码 height=47 width=412 loading=lazy></p><p>再接着跟进，就看到了全部的内容</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/28_hu0ed56587f2db9c34806fded1f532c344_15127_616x731_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/28_hu0ed56587f2db9c34806fded1f532c344_15127_616x731_resize_q75_h2_box_3.webp title=枚举类型 height=731 width=616 loading=lazy></p><p>2048换成16进制是0x800
<img src=/posts/security/reverse/crack-sdu-online-exam-software/29_hu240b85457e0019303ff568b7248477a6_789_263x27_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/29_hu240b85457e0019303ff568b7248477a6_789_263x27_resize_q75_h2_box_3.webp title=0x800 height=27 width=263 loading=lazy>
根据代码是无边框类型
<img src=/posts/security/reverse/crack-sdu-online-exam-software/30_hu9064c6117fe421d5e78e6b0bfbd408c5_717_253x24_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/30_hu9064c6117fe421d5e78e6b0bfbd408c5_717_253x24_resize_q75_h2_box_3.webp title=Fameless height=24 width=253 loading=lazy></p><p>我们需要的是有边框有放大缩小和关闭按钮，所以需要的类型是</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/31_hu4f900fc2e20c75e0f6a97bd32068dd93_1416_614x59_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/31_hu4f900fc2e20c75e0f6a97bd32068dd93_1416_614x59_resize_q75_h2_box_3.webp title=需要的类型 height=59 width=614 loading=lazy></p><p>此时还没有关闭按钮，根据计算方式，还需要或上关闭按钮的值</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/32_hu45d84e718eb8b9e036574011a914cf1e_592_330x23_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/32_hu45d84e718eb8b9e036574011a914cf1e_592_330x23_resize_q75_h2_box_3.webp title=关闭按钮的值 height=23 width=330 loading=lazy></p><p>修改这个参数后窗口就可以随意移动、修改大小、缩小或者全屏了。</p><h3 id=绕过摄像头检查><a href=#绕过摄像头检查 class="header-mark headerLink">绕过摄像头检查</a></h3><p>我们还知道这个程序还必须要摄像头检查通过，通过简单的实验，发现摄像头只需要检查通过一次，后面不会重复检查，只会读取device.ini文件，所以我们增加这个文件，并手动指定检查通过</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/33_hu4234ba7663bf039103008a578de7bff7_5931_311x182_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/33_hu4234ba7663bf039103008a578de7bff7_5931_311x182_resize_q75_h2_box_3.webp title=device.ini height=182 width=311 loading=lazy></p><p>同时通过搜索字符串查看交叉引用可以找到需要读取或者写入文件的地方，这里没有深入研究了，谁敢兴趣谁去研究</p><p><img src=/posts/security/reverse/crack-sdu-online-exam-software/34_hua345c287cba9980b69c5584c446522cf_57491_1022x427_resize_q75_h2_box_3.webp alt=/posts/security/reverse/crack-sdu-online-exam-software/34_hua345c287cba9980b69c5584c446522cf_57491_1022x427_resize_q75_h2_box_3.webp title=device.ini交叉引用 height=427 width=1022 loading=lazy></p><h3 id=其他地方><a href=#其他地方 class="header-mark headerLink">其他地方</a></h3><p>在对这个程序探究的过程中，还发现了tab栏和menu栏可以打开显示，但是实际作用不大，就没有管。</p><p>同时通过burp抓包和测试，找到了在线考试的登录接口并发现普通浏览器可以正常使用</p><p>同时通过对相关接口的测试，找到了任意密码修改和个人信息泄露的漏洞</p><h2 id=申明与文件><a href=#申明与文件 class="header-mark headerLink">申明与文件</a></h2><p>同时本次研究完全以学习为目的，不得将上述内容用作商业或非法，否则一切后果由用户负责。您必须在下载后的24个小时之内，从您的电脑中彻底删除上述内容。</p><p>破解之后的程序 {% asset_link 线上考试.zip [点击下载] %}</p>]]></description></item></channel></rss>