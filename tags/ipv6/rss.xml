<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="/xsl/rss.xsl"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>IPv6 - 标签 - zu1k</title><link>https://zu1k.com/tags/ipv6/</link><description/><language>zh-CN</language><managingEditor>i@zu1k.com (zu1k)</managingEditor><webMaster>i@zu1k.com (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 07 May 2022 19:21:25 +0800</lastBuildDate><atom:link href="https://zu1k.com/tags/ipv6/" rel="self" type="application/rss+xml"/><item><title>谁不想要 2^64 个 IP 的代理池 ？</title><link>https://zu1k.com/posts/tutorials/http-proxy-ipv6-pool/</link><pubDate>Sat, 07 May 2022 19:21:25 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/tutorials/http-proxy-ipv6-pool/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>昨天我舍友为了爬虫购买了昂贵的 IP 代理池，我在旁边突然萌生了一个想法，现在各大 ISP/IDC 动不动就给你分配一整个 64 位前缀的 IPv6 网段，我们能不能好好利用一下这庞大的 IPv6 IP 资源呢？</p>
<p>有了这个想法我就睡不着了，今天一大早（9点半）我就起来着手研究，最终成功实现每一个请求从一个单独的 IPv6 地址发出。</p>
<p>先看效果，我把写好的程序放在服务器上跑了一会，下面是 Cloudflare 统计的访问信息，可以看到独立访问者 (独立 IP) 数量达到了我的小博客前所未有的数量，基本上是一个请求一个独立 IP，效果非常不错。</p>
<p></p>
<h2 id="教程">教程</h2>
<p>首先你要有一整个 IPv6 子网路由给你，当遇到吝啬的服务商，即使他们有巨多的 IPv6 资源，他也不给你用，这种情况你没辙。不过幸好，绝大多数 ISP/IDC 都会给你一整个 IPv6 <code>/64</code> 子网，有的甚至可以申请 <code>/56</code> 子网，这数量又增加了好几个数量级，所以你几乎不必担心。</p>
<p>为了方便实验，我购买了 <a href="https://www.vultr.com/?ref=9039594-8H" target="_blank" rel="noopener noreffer" class="post-link">[Vultr 的服务器]</a>，如果你还没有注册，可以使用我的 <a href="https://www.vultr.com/?ref=9039594-8H" target="_blank" rel="noopener noreffer" class="post-link">[AFF 链接]</a>.</p>
<p>你可以通过 <code>ip a</code> 命令查看网络接口的地址，从而获取你的 IPv6 子网信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ip a
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">2: enp1s0: &lt;BROADCAST,MULTICAST,ALLMULTI,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc fq state UP group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    ......
</span></span><span class="line"><span class="cl">    inet6 2001:19f0:6001:48e4:5400:3ff:fefa:a71d/64 scope global dynamic mngtmpaddr 
</span></span><span class="line"><span class="cl">       valid_lft 2591171sec preferred_lft 603971sec
</span></span><span class="line"><span class="cl">    inet6 fe80::b155:e257:a8f7:6940/64 scope link stable-privacy 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，默认给你的 IPv6 地址是动态的，这是由 SLAAC 协议根据前缀和 Mac 地址自动生成的; 还有一个 <code>fe80</code> 开头的 IPv6 地址，这也是自动分配的本地链路地址。这很好，通过这些无状态地址配置协议，使 IPv6 避免的手动配置，即插即用。</p>
<p>在我的试验中，我拿到的子网为 <code>2001:19f0:6001:48e4::/64</code>，下面都以此为基础。</p>
<p><strong>绑定和路由</strong></p>
<p>在拿到 IPv6 子网后，需要添加路由。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># ip addr add local 2001:19f0:6001:48e4::/64 dev lo </span>
</span></span><span class="line"><span class="cl"><span class="c1"># 纠正：无需添加地址，这一行只能添加一个地址。我们通过 ip_nonlocal_bind 来允许绑定</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip route add <span class="nb">local</span> 2001:19f0:6001:48e4::/64 dev enp1s0
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了能够绑定任意 IP，我们需要开启内核的 <code>ip_nonlocal_bind</code> 特性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sysctl net.ipv6.ip_nonlocal_bind<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NDP</strong></p>
<p>类似于 IPv4 中 ARP 协议的作用，IPv6 中需要使用 <code>ND</code> 协议来发现邻居并确定可用路径。我们需要开启一个 <code>ND</code> 代理：</p>
<p>安装 <code>ndppd</code>: <code>apt install ndppd</code></p>
<p>编辑 <code>/etc/ndppd.conf</code> 文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">route-ttl 30000
</span></span><span class="line"><span class="cl">proxy enp1s0 {
</span></span><span class="line"><span class="cl">    router no
</span></span><span class="line"><span class="cl">    timeout 500
</span></span><span class="line"><span class="cl">    ttl 30000
</span></span><span class="line"><span class="cl">    rule 2001:19f0:6001:48e4::/64 {
</span></span><span class="line"><span class="cl">        static
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动 <code>ndppd</code>: <code>systemctl start ndppd</code></p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon icon-pencil"></i>注意<i class="details-icon icon-angle-circled-right"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>只有使用 ND 协议进行主机发现的时候才需要开启 NDP。</p>
<p>如果整个子网是直接路由过来，则无需进行这一步。例如使用 Linode 或 He.com Tunnelbroker</p>
</div>
        </div>
    </div>
<p><strong>验证</strong></p>
<p>接下来你可以验证一下了，用 <code>curl --interface</code> 指定出口 IP：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ curl --interface 2001:19f0:6001:48e4::1 ipv6.ip.sb
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4::1
</span></span><span class="line"><span class="cl">$ curl --interface 2001:19f0:6001:48e4::2 ipv6.ip.sb
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4::2
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，能够按照我们指定的任意 IP 进行请求</p>
<h2 id="http-代理">Http 代理</h2>
<p>为了方便使用，使用 Rust 写了一个 http 代理服务端，每一个请求会走指定 IPv6 子网下随机 IP，算是一个基础 demo</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">./http-proxy-ipv6-pool -b 127.0.0.1:51080 -i 2001:19f0:6001:48e4::/64
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ <span class="k">while</span> true<span class="p">;</span> <span class="k">do</span> curl -x http://127.0.0.1:51080 ipv6.ip.sb<span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:971e:f12c:e2e7:d92a
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:6d1c:90fe:ee79:1123
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:f7b9:b506:99d7:1be9
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:a06a:393b:e82f:bffc
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:245f:8272:2dfb:72ce
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:df9e:422c:f804:94f7
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:dd48:6ba2:ff76:f1af
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:1306:4a84:570c:f829
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:6f3:4eb:c958:ddfa
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:aa26:3bf9:6598:9e82
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:be6b:6a62:f8f7:a14d
</span></span><span class="line"><span class="cl">2001:19f0:6001:48e4:b598:409d:b946:17c
</span></span></code></pre></td></tr></table>
</div>
</div><p>欢迎 Star: <a href="https://github.com/zu1k/http-proxy-ipv6-pool" target="_blank" rel="noopener noreffer" class="post-link">https://github.com/zu1k/http-proxy-ipv6-pool</a></p>
<h2 id="碎碎念">碎碎念</h2>
<!-- ### Proxypool 项目

舍友要买代理池，我就去 GitHub 上搜了一下，没想到我之前早已停更的项目竟然排在第一位。

![GitHub 搜 proxypool](github-proxypool.png)

排名第二的是专门给爬虫准备的代理池，作者是我的师兄，他对爬虫有非常深入的研究，推荐给大家。 -->
<h3 id="一开始的想法">一开始的想法</h3>
<p>其实我一开始的想法并不是直接给接口附加整个 IP 段的。一开始我并不知道网络接口可以直接附加一整个 IP 段，考虑到这个 IPv6 段数量过于庞大，通过枚举给接口附加多个静态 IP 显然不现实，所以我就在想办法去自己封装 IP 包然后进行注入。</p>
<p>我想到了两个注入数据包的方案：</p>
<ol>
<li>可以完全自己封装 IPv6 包以及下层协议，通过网卡的 raw fd 直接写数据</li>
</ol>
<p>这个方案在我想到的一瞬间我就放弃了，因为协议过于复杂，我根本不可能实现</p>
<ol start="2">
<li>创建一个 TUN 设备，配置这个 TUN 设备的网段为 IPv6 子网，然后将 TUN 设备和真实网络设备创建网桥。</li>
</ol>
<p>通过 TUN 向系统网络栈注入源 IP 为网段下随机的 IPv6 地址，伪造有众多 host 的假象。</p>
<p>因为前面稍微了解过 TUN (可以看我之前写的文章<a href="../../coding/tun-mode/" rel="" class="post-link">[使用 TUN 的模式]</a>)，所以自然而然我就会有这个想法，并且我深信这是可行的。我之所以认为这样可行，是因为之前搞过 <a href="../../coding/set-ipv6-for-every-docker-container/" rel="" class="post-link">[给每一个 Docker 容器一个独立的 IP]</a>，同样是充分利用丰富的 IPv6 资源，感兴趣的同学可以看一下。</p>
<p>通过搜索资料，最后确定使用 TUN 不可行，至少要用 TAP，<a href="https://serverfault.com/questions/949945/ipv6-on-Linux-tun-tap-ndp-not-working" target="_blank" rel="noopener noreffer" class="post-link">[因为要处理 NDP 协议]</a>，具体后面的细节我也没有深入研究。</p>
<p>幸亏后面搜资料发现了本文方便的方法，才避免了我陷入这些迷途。反思一下，即自己的知识不够，对 Linux 内核及其提供的众多功能了解不够深入，导致人家原本就有的功能自己根本不知道，所以想不出合适的方案。</p>
<h3 id="waf">WAF</h3>
<p>我也不是非常了解，现在的 WAF 是不是就是单纯根据 IP 来进行限流限速 ？如果真是这样，那利用这庞大的 IPv6 资源岂不是轻松绕过封禁。</p>
<p>如果是会直接封禁或者限制整个子网，会不会有很严重的误杀，毕竟不是所有 ISP 都会这么大方的给一整个 IP 段。</p>
<p>有了解的小伙伴欢迎评论交流。</p>
]]></description></item><item><title>给docker里的每一个容器一个独立的ipv6地址</title><link>https://zu1k.com/posts/coding/set-ipv6-for-every-docker-container/</link><pubDate>Sat, 31 Aug 2019 14:39:03 +0800</pubDate><author>zu1k</author><guid>https://zu1k.com/posts/coding/set-ipv6-for-every-docker-container/</guid><description><![CDATA[<p>ipv6不断普及，ipv6地址多的数不胜数，机房给单台机器分配的ipv6段达到了可怕的64位长度的子网主机号。</p>
<p>那我不禁在想，能不能给docker下的每个容器独立的ipv6地址，这样就不需要映射端口号了。</p>
<p>所以就有了以下实践：</p>
<p>首先，给docker engine开启ipv6支持, 参考： <a href="https://docs.docker.com/config/daemon/ipv6/" target="_blank" rel="noopener noreffer" class="post-link">https://docs.docker.com/config/daemon/ipv6/</a></p>
<p>配置/etc/docker/daemon.json文件如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ipv6&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;fixed-cidr-v6&#34;</span><span class="p">:</span> <span class="s2">&#34;2001🔢5001🔢:/64&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行 <code>systemctl reload docker</code> 重载Docker Engine的配置文件</p>
<p>这样docker默认的bridge网络就会给容器分配随机的ipv6地址了。</p>
<p>但是我们通常需要固定的ipv6地址，所以需要添加自定义网桥网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d bridge --ipv6 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet <span class="s2">&#34;2001🔢5001🔢6666::/80&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gateway<span class="o">=</span><span class="s2">&#34;2001🔢5001🔢6666::1&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet<span class="o">=</span>172.28.0.0/16 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gateway<span class="o">=</span>172.28.0.1 ipv6
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后启动docker容器时候指定ipv6网桥和ipv6地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -itd -P --ip<span class="o">=</span>172.28.0.101 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip6<span class="o">=</span><span class="s2">&#34;2001🔢5001🔢6666::101&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network<span class="o">=</span>ipv6 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name<span class="o">=</span>ipv6test <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ubuntu:18.04 /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时容器已经有独立的ipv6地址了，我们发现向外访问可以访问，但是外界访问不到docker后面隐藏的container
这是因为ipv6使用NDP协议，我们需要在容器的宿主机上设置 ndp代理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sysctl net.ipv6.conf.ens3.proxy_ndp<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>ens3是我的宿主机外网网卡，这里需要替换成你自己的</p>
</blockquote>
<p>这里每一个docker分配的ipv6地址都需要添加这样一条规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip -6 neigh add proxy 2001🔢5001🔢6666::101 dev ens3
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>